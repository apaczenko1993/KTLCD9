
KTLCD9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  080030ac  080030ac  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ac  080030ac  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000040ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080030b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000064  08003118  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003118  0000521c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f9d  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a2  00000000  00000000  0000d02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0000e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079f  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b9  00000000  00000000  0000fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ce  00000000  00000000  00027328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882a3  00000000  00000000  000324f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  000ba7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002294 	.word	0x08002294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002294 	.word	0x08002294

0800014c <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void delay_us (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	//__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	//while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}
 8000156:	bf00      	nop
 8000158:	370c      	adds	r7, #12
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fda3 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f895 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f925 	bl	80003bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000172:	f000 f8d3 	bl	800031c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, GPIO_PIN_SET); // zalaczenie zasilania
 8000176:	2201      	movs	r2, #1
 8000178:	2110      	movs	r1, #16
 800017a:	4841      	ldr	r0, [pc, #260]	@ (8000280 <main+0x120>)
 800017c:	f001 f886 	bl	800128c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1); // timer start, for us delay in st7735
 8000180:	4840      	ldr	r0, [pc, #256]	@ (8000284 <main+0x124>)
 8000182:	f001 fcc9 	bl	8001b18 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin, GPIO_PIN_SET); // ???
 8000186:	2201      	movs	r2, #1
 8000188:	2180      	movs	r1, #128	@ 0x80
 800018a:	483f      	ldr	r0, [pc, #252]	@ (8000288 <main+0x128>)
 800018c:	f001 f87e 	bl	800128c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(T2_GPIO_Port, T2_Pin, GPIO_PIN_SET); // ???
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	@ 0x40
 8000194:	483c      	ldr	r0, [pc, #240]	@ (8000288 <main+0x128>)
 8000196:	f001 f879 	bl	800128c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, GPIO_PIN_SET); // LCD Backlight
 800019a:	2201      	movs	r2, #1
 800019c:	2180      	movs	r1, #128	@ 0x80
 800019e:	4838      	ldr	r0, [pc, #224]	@ (8000280 <main+0x120>)
 80001a0:	f001 f874 	bl	800128c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // LED DIODE
 80001a4:	2200      	movs	r2, #0
 80001a6:	2101      	movs	r1, #1
 80001a8:	4837      	ldr	r0, [pc, #220]	@ (8000288 <main+0x128>)
 80001aa:	f001 f86f 	bl	800128c <HAL_GPIO_WritePin>
  ST7735_Init();
 80001ae:	f000 fb9f 	bl	80008f0 <ST7735_Init>

  HAL_Delay(55);
 80001b2:	2037      	movs	r0, #55	@ 0x37
 80001b4:	f000 fdde 	bl	8000d74 <HAL_Delay>

  ST7735_FillScreen(ST7735_BLUE);
 80001b8:	201f      	movs	r0, #31
 80001ba:	f000 fd56 	bl	8000c6a <ST7735_FillScreen>
  HAL_Delay(2000);
 80001be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001c2:	f000 fdd7 	bl	8000d74 <HAL_Delay>
  ST7735_FillScreenFast(ST7735_GREEN);
 80001c6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80001ca:	f000 fd5f 	bl	8000c8c <ST7735_FillScreenFast>
  HAL_Delay(2000);
 80001ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001d2:	f000 fdcf 	bl	8000d74 <HAL_Delay>


  //ST7735_DrawImage(0, 0, 128, 128, (uint16_t*)test_img_128x128);
  ST7735_FillScreenFast(ST7735_BLACK);
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fd58 	bl	8000c8c <ST7735_FillScreenFast>
  //ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
  HAL_Delay(2500);
 80001dc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80001e0:	f000 fdc8 	bl	8000d74 <HAL_Delay>
  state = false;
 80001e4:	4b29      	ldr	r3, [pc, #164]	@ (800028c <main+0x12c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state){
 80001ea:	4b28      	ldr	r3, [pc, #160]	@ (800028c <main+0x12c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d011      	beq.n	8000216 <main+0xb6>
	  	ST7735_FillRectangleFast(10, 10, 40, 40, ST7735_BLUE);
 80001f2:	231f      	movs	r3, #31
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2328      	movs	r3, #40	@ 0x28
 80001f8:	2228      	movs	r2, #40	@ 0x28
 80001fa:	210a      	movs	r1, #10
 80001fc:	200a      	movs	r0, #10
 80001fe:	f000 fcbc 	bl	8000b7a <ST7735_FillRectangleFast>
	  	ST7735_FillRectangleFast(100, 0, 20, 20, ST7735_RED);
 8000202:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2314      	movs	r3, #20
 800020a:	2214      	movs	r2, #20
 800020c:	2100      	movs	r1, #0
 800020e:	2064      	movs	r0, #100	@ 0x64
 8000210:	f000 fcb3 	bl	8000b7a <ST7735_FillRectangleFast>
 8000214:	e011      	b.n	800023a <main+0xda>
	  }
	  else{
		ST7735_FillRectangleFast(10, 10, 40, 40, ST7735_GREEN);
 8000216:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2328      	movs	r3, #40	@ 0x28
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	210a      	movs	r1, #10
 8000222:	200a      	movs	r0, #10
 8000224:	f000 fca9 	bl	8000b7a <ST7735_FillRectangleFast>
		ST7735_FillRectangleFast(100, 0, 20, 20, ST7735_MAGENTA);
 8000228:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2314      	movs	r3, #20
 8000230:	2214      	movs	r2, #20
 8000232:	2100      	movs	r1, #0
 8000234:	2064      	movs	r0, #100	@ 0x64
 8000236:	f000 fca0 	bl	8000b7a <ST7735_FillRectangleFast>

	  }
	  state=!state;
 800023a:	4b14      	ldr	r3, [pc, #80]	@ (800028c <main+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	bf14      	ite	ne
 8000242:	2301      	movne	r3, #1
 8000244:	2300      	moveq	r3, #0
 8000246:	b2db      	uxtb	r3, r3
 8000248:	f083 0301 	eor.w	r3, r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0x12c>)
 8000256:	701a      	strb	r2, [r3, #0]
	  ST7735_WriteString(70, 100, "MAGENTA", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000258:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <main+0x130>)
 800025a:	2200      	movs	r2, #0
 800025c:	9202      	str	r2, [sp, #8]
 800025e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000262:	9201      	str	r2, [sp, #4]
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	9200      	str	r2, [sp, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <main+0x134>)
 800026c:	2164      	movs	r1, #100	@ 0x64
 800026e:	2046      	movs	r0, #70	@ 0x46
 8000270:	f000 fbd0 	bl	8000a14 <ST7735_WriteString>
	  HAL_Delay(500);
 8000274:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000278:	f000 fd7c 	bl	8000d74 <HAL_Delay>
	  if(state){
 800027c:	e7b5      	b.n	80001ea <main+0x8a>
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800
 8000284:	20000084 	.word	0x20000084
 8000288:	40011000 	.word	0x40011000
 800028c:	20000080 	.word	0x20000080
 8000290:	20000004 	.word	0x20000004
 8000294:	080022ac 	.word	0x080022ac

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	@ 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ff68 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ca:	2300      	movs	r3, #0
 80002cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 ffef 	bl	80012bc <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002e4:	f000 f906 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fa5c 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800030e:	f000 f8f1 	bl	80004f4 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	@ 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000338:	4b1e      	ldr	r3, [pc, #120]	@ (80003b4 <MX_TIM1_Init+0x98>)
 800033a:	4a1f      	ldr	r2, [pc, #124]	@ (80003b8 <MX_TIM1_Init+0x9c>)
 800033c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800033e:	4b1d      	ldr	r3, [pc, #116]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000340:	223f      	movs	r2, #63	@ 0x3f
 8000342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_TIM1_Init+0x98>)
 800034c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000352:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <MX_TIM1_Init+0x98>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000364:	4813      	ldr	r0, [pc, #76]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000366:	f001 fb87 	bl	8001a78 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000370:	f000 f8c0 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <MX_TIM1_Init+0x98>)
 8000382:	f001 fc13 	bl	8001bac <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800038c:	f000 f8b2 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_TIM1_Init+0x98>)
 800039e:	f001 fdd1 	bl	8001f44 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003a8:	f000 f8a4 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000084 	.word	0x20000084
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b44      	ldr	r3, [pc, #272]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a43      	ldr	r2, [pc, #268]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b41      	ldr	r3, [pc, #260]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b3e      	ldr	r3, [pc, #248]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a3d      	ldr	r2, [pc, #244]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b3b      	ldr	r3, [pc, #236]	@ (80004e4 <MX_GPIO_Init+0x128>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b38      	ldr	r3, [pc, #224]	@ (80004e4 <MX_GPIO_Init+0x128>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a37      	ldr	r2, [pc, #220]	@ (80004e4 <MX_GPIO_Init+0x128>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <MX_GPIO_Init+0x128>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|T2_Pin|T1_Pin|LCD_RD_Pin
 8000418:	2200      	movs	r2, #0
 800041a:	f640 71c1 	movw	r1, #4033	@ 0xfc1
 800041e:	4832      	ldr	r0, [pc, #200]	@ (80004e8 <MX_GPIO_Init+0x12c>)
 8000420:	f000 ff34 	bl	800128c <HAL_GPIO_WritePin>
                          |LCD_WR_Pin|LCD_RS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_Pin|BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2190      	movs	r1, #144	@ 0x90
 8000428:	4830      	ldr	r0, [pc, #192]	@ (80004ec <MX_GPIO_Init+0x130>)
 800042a:	f000 ff2f 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800042e:	2200      	movs	r2, #0
 8000430:	21ff      	movs	r1, #255	@ 0xff
 8000432:	482f      	ldr	r0, [pc, #188]	@ (80004f0 <MX_GPIO_Init+0x134>)
 8000434:	f000 ff2a 	bl	800128c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin T2_Pin T1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|T2_Pin|T1_Pin;
 8000438:	23c1      	movs	r3, #193	@ 0xc1
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4826      	ldr	r0, [pc, #152]	@ (80004e8 <MX_GPIO_Init+0x12c>)
 8000450:	f000 fd98 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8000454:	2306      	movs	r3, #6
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4820      	ldr	r0, [pc, #128]	@ (80004e8 <MX_GPIO_Init+0x12c>)
 8000468:	f000 fd8c 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_Pin BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = ON_Pin|BACKLIGHT_Pin;
 800046c:	2390      	movs	r3, #144	@ 0x90
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	2301      	movs	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2302      	movs	r3, #2
 800047a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	481a      	ldr	r0, [pc, #104]	@ (80004ec <MX_GPIO_Init+0x130>)
 8000484:	f000 fd7e 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8000488:	2340      	movs	r3, #64	@ 0x40
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEL_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4814      	ldr	r0, [pc, #80]	@ (80004ec <MX_GPIO_Init+0x130>)
 800049c:	f000 fd72 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004a0:	23ff      	movs	r3, #255	@ 0xff
 80004a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480e      	ldr	r0, [pc, #56]	@ (80004f0 <MX_GPIO_Init+0x134>)
 80004b8:	f000 fd64 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_CS_Pin;
 80004bc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <MX_GPIO_Init+0x12c>)
 80004d6:	f000 fd55 	bl	8000f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */


/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <HAL_TIM_Base_MspInit+0x34>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d10b      	bne.n	800058e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <HAL_TIM_Base_MspInit+0x38>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a08      	ldr	r2, [pc, #32]	@ (800059c <HAL_TIM_Base_MspInit+0x38>)
 800057c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_TIM_Base_MspInit+0x38>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40012c00 	.word	0x40012c00
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <NMI_Handler+0x4>

080005a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <MemManage_Handler+0x4>

080005b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 fba4 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f001 fdc0 	bl	80021ac <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	@ (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20005000 	.word	0x20005000
 8000658:	00000400 	.word	0x00000400
 800065c:	200000cc 	.word	0x200000cc
 8000660:	20000220 	.word	0x20000220

08000664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff fff8 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800068c:	4c09      	ldr	r4, [pc, #36]	@ (80006b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f001 fd8d 	bl	80021b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fd5f 	bl	8000160 <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006ac:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 80006b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b4:	2000021c 	.word	0x2000021c

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>
	...

080006bc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <ST7735_Select+0x1c>)
 80006c8:	f000 fde0 	bl	800128c <HAL_GPIO_WritePin>
	delay_us(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff fd3d 	bl	800014c <delay_us>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40011000 	.word	0x40011000

080006dc <ST7735_Unselect>:

void ST7735_Unselect() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <ST7735_Unselect+0x1c>)
 80006e8:	f000 fdd0 	bl	800128c <HAL_GPIO_WritePin>
	delay_us(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fd2d 	bl	800014c <delay_us>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40011000 	.word	0x40011000

080006fc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]


    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);  // RS/DCX = 0 dla komendy
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <ST7735_WriteCommand+0x54>)
 800070e:	f000 fdbd 	bl	800128c <HAL_GPIO_WritePin>
    delay_us(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fd1a 	bl	800014c <delay_us>

    LCD_DATA_PORT->ODR = cmd;  // Ustaw dane na magistrali D0-D7
 8000718:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <ST7735_WriteCommand+0x58>)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	60d3      	str	r3, [r2, #12]
    delay_us(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd14 	bl	800014c <delay_us>

    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);  // WR = 0, inicjacja zapisu
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <ST7735_WriteCommand+0x54>)
 800072c:	f000 fdae 	bl	800128c <HAL_GPIO_WritePin>
    delay_us(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff fd0b 	bl	800014c <delay_us>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);    // WR = 1, zakończenie zapisu
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <ST7735_WriteCommand+0x54>)
 800073e:	f000 fda5 	bl	800128c <HAL_GPIO_WritePin>
    delay_us(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fd02 	bl	800014c <delay_us>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40011000 	.word	0x40011000
 8000754:	40010c00 	.word	0x40010c00

08000758 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);  // RS/DCX = 1 dla danych
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000768:	4815      	ldr	r0, [pc, #84]	@ (80007c0 <ST7735_WriteData+0x68>)
 800076a:	f000 fd8f 	bl	800128c <HAL_GPIO_WritePin>
	delay_us(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fcec 	bl	800014c <delay_us>

    while (buff_size--) {
 8000774:	e01a      	b.n	80007ac <ST7735_WriteData+0x54>
        LCD_DATA_PORT->ODR = *buff++;  // Ustaw dane na magistrali D0-D7
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <ST7735_WriteData+0x6c>)
 8000780:	60da      	str	r2, [r3, #12]
        delay_us(1);  // Opóźnienie po ustawieniu danych (TDHT)
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fce2 	bl	800014c <delay_us>

        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);  // WR = 0, inicjacja zapisu
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <ST7735_WriteData+0x68>)
 8000790:	f000 fd7c 	bl	800128c <HAL_GPIO_WritePin>
        delay_us(1);  // Opóźnienie po WR = 0 (TWRL)
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fcd9 	bl	800014c <delay_us>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);    // WR = 1, zakończenie zapisu
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <ST7735_WriteData+0x68>)
 80007a2:	f000 fd73 	bl	800128c <HAL_GPIO_WritePin>
        delay_us(1);  // Opóźnienie po WR = 1 (TWRH)
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fcd0 	bl	800014c <delay_us>
    while (buff_size--) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	603a      	str	r2, [r7, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1df      	bne.n	8000776 <ST7735_WriteData+0x1e>
    }
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007da:	e034      	b.n	8000846 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff87 	bl	80006fc <ST7735_WriteCommand>

        numArgs = *addr++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	72bb      	strb	r3, [r7, #10]
        ms = numArgs & DELAY;
 80007f8:	7abb      	ldrb	r3, [r7, #10]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000800:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000802:	7abb      	ldrb	r3, [r7, #10]
 8000804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000808:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800080a:	7abb      	ldrb	r3, [r7, #10]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000810:	7abb      	ldrb	r3, [r7, #10]
 8000812:	4619      	mov	r1, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff9f 	bl	8000758 <ST7735_WriteData>
            addr += numArgs;
 800081a:	7abb      	ldrb	r3, [r7, #10]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	2bff      	cmp	r3, #255	@ 0xff
 8000836:	d102      	bne.n	800083e <ST7735_ExecuteCommandList+0x76>
 8000838:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800083c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fa97 	bl	8000d74 <HAL_Delay>
    while(numCommands--) {
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	73fa      	strb	r2, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1c5      	bne.n	80007dc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800085a:	b590      	push	{r4, r7, lr}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	4604      	mov	r4, r0
 8000862:	4608      	mov	r0, r1
 8000864:	4611      	mov	r1, r2
 8000866:	461a      	mov	r2, r3
 8000868:	4623      	mov	r3, r4
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4603      	mov	r3, r0
 800086e:	71bb      	strb	r3, [r7, #6]
 8000870:	460b      	mov	r3, r1
 8000872:	717b      	strb	r3, [r7, #5]
 8000874:	4613      	mov	r3, r2
 8000876:	713b      	strb	r3, [r7, #4]

    ST7735_WriteCommand(ST7735_CASET);
 8000878:	202a      	movs	r0, #42	@ 0x2a
 800087a:	f7ff ff3f 	bl	80006fc <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fc64 	bl	800014c <delay_us>

    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000884:	2300      	movs	r3, #0
 8000886:	733b      	strb	r3, [r7, #12]
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	3301      	adds	r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	737b      	strb	r3, [r7, #13]
 8000890:	2300      	movs	r3, #0
 8000892:	73bb      	strb	r3, [r7, #14]
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	3301      	adds	r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff58 	bl	8000758 <ST7735_WriteData>
    delay_us(1);  // Opóźnienie po wysłaniu danych (TDST)
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fc4f 	bl	800014c <delay_us>

    ST7735_WriteCommand(ST7735_RASET);
 80008ae:	202b      	movs	r0, #43	@ 0x2b
 80008b0:	f7ff ff24 	bl	80006fc <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fc49 	bl	800014c <delay_us>

    data[1] = y0 + ST7735_YSTART;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	3302      	adds	r3, #2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80008c2:	793b      	ldrb	r3, [r7, #4]
 80008c4:	3302      	adds	r3, #2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2104      	movs	r1, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff41 	bl	8000758 <ST7735_WriteData>
    delay_us(1);  // Opóźnienie po wysłaniu danych (TDST)
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fc38 	bl	800014c <delay_us>

    ST7735_WriteCommand(ST7735_RAMWR);
 80008dc:	202c      	movs	r0, #44	@ 0x2c
 80008de:	f7ff ff0d 	bl	80006fc <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fc32 	bl	800014c <delay_us>
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <ST7735_Init>:

    //ST7735_Unselect();

}

void ST7735_Init() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80008f4:	f7ff fee2 	bl	80006bc <ST7735_Select>
    //ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 80008f8:	4806      	ldr	r0, [pc, #24]	@ (8000914 <ST7735_Init+0x24>)
 80008fa:	f7ff ff65 	bl	80007c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <ST7735_Init+0x28>)
 8000900:	f7ff ff62 	bl	80007c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <ST7735_Init+0x2c>)
 8000906:	f7ff ff5f 	bl	80007c8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800090a:	f7ff fee7 	bl	80006dc <ST7735_Unselect>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08003020 	.word	0x08003020
 8000918:	0800305c 	.word	0x0800305c
 800091c:	0800306c 	.word	0x0800306c

08000920 <ST7735_WriteChar>:



static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000920:	b082      	sub	sp, #8
 8000922:	b590      	push	{r4, r7, lr}
 8000924:	b089      	sub	sp, #36	@ 0x24
 8000926:	af00      	add	r7, sp, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	460b      	mov	r3, r1
 8000930:	80bb      	strh	r3, [r7, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ST7735_Select();
 8000936:	f7ff fec1 	bl	80006bc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	b2d9      	uxtb	r1, r3
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800094a:	4413      	add	r3, r2
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3b01      	subs	r3, #1
 8000950:	b2dc      	uxtb	r4, r3
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800095a:	4413      	add	r3, r2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4622      	mov	r2, r4
 8000964:	f7ff ff79 	bl	800085a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e043      	b.n	80009f6 <ST7735_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 800096e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	3b20      	subs	r3, #32
 8000974:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000978:	fb01 f303 	mul.w	r3, r1, r3
 800097c:	4619      	mov	r1, r3
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	440b      	add	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	e029      	b.n	80009e4 <ST7735_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00e      	beq.n	80009be <ST7735_WriteChar+0x9e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	743b      	strb	r3, [r7, #16]
 80009aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2102      	movs	r1, #2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fece 	bl	8000758 <ST7735_WriteData>
 80009bc:	e00f      	b.n	80009de <ST7735_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	733b      	strb	r3, [r7, #12]
 80009ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2102      	movs	r1, #2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff febd 	bl	8000758 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009e8:	461a      	mov	r2, r3
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d3cf      	bcc.n	8000990 <ST7735_WriteChar+0x70>
    for(i = 0; i < font.height; i++) {
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	3301      	adds	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
 80009f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009fa:	461a      	mov	r2, r3
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d3b5      	bcc.n	800096e <ST7735_WriteChar+0x4e>
            }
        }
    }
    ST7735_Unselect();
 8000a02:	f7ff fe6b 	bl	80006dc <ST7735_Unselect>
}
 8000a06:	bf00      	nop
 8000a08:	3724      	adds	r7, #36	@ 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a10:	b002      	add	sp, #8
 8000a12:	4770      	bx	lr

08000a14 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a14:	b082      	sub	sp, #8
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af04      	add	r7, sp, #16
 8000a1c:	603a      	str	r2, [r7, #0]
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	4603      	mov	r3, r0
 8000a22:	80fb      	strh	r3, [r7, #6]
 8000a24:	460b      	mov	r3, r1
 8000a26:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a28:	f7ff fe48 	bl	80006bc <ST7735_Select>

    while(*str) {
 8000a2c:	e02d      	b.n	8000a8a <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	7d3a      	ldrb	r2, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	2b9f      	cmp	r3, #159	@ 0x9f
 8000a36:	dd13      	ble.n	8000a60 <ST7735_WriteString+0x4c>
            x = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a3c:	7d7b      	ldrb	r3, [r7, #21]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	4413      	add	r3, r2
 8000a44:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	7d7a      	ldrb	r2, [r7, #21]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a4e:	dc21      	bgt.n	8000a94 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b20      	cmp	r3, #32
 8000a56:	d103      	bne.n	8000a60 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
                continue;
 8000a5e:	e014      	b.n	8000a8a <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	88b9      	ldrh	r1, [r7, #4]
 8000a66:	88f8      	ldrh	r0, [r7, #6]
 8000a68:	8c3b      	ldrh	r3, [r7, #32]
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	8bbb      	ldrh	r3, [r7, #28]
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	f7ff ff53 	bl	8000920 <ST7735_WriteChar>
        x += font.width;
 8000a7a:	7d3b      	ldrb	r3, [r7, #20]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	4413      	add	r3, r2
 8000a82:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1cd      	bne.n	8000a2e <ST7735_WriteString+0x1a>
 8000a92:	e000      	b.n	8000a96 <ST7735_WriteString+0x82>
                break;
 8000a94:	bf00      	nop
    }

    ST7735_Unselect();
 8000a96:	f7ff fe21 	bl	80006dc <ST7735_Unselect>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa4:	b002      	add	sp, #8
 8000aa6:	4770      	bx	lr

08000aa8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]

	ST7735_Select(); // funckja z delayem 1us
 8000ac6:	f7ff fdf9 	bl	80006bc <ST7735_Select>

	// Sprawdzenie granic prostokąta
	    if (x >= ST7735_WIDTH || y >= ST7735_HEIGHT) return;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b9f      	cmp	r3, #159	@ 0x9f
 8000ace:	d850      	bhi.n	8000b72 <ST7735_FillRectangle+0xca>
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad4:	d84d      	bhi.n	8000b72 <ST7735_FillRectangle+0xca>
	    if (x + w > ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	4413      	add	r3, r2
 8000adc:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ade:	dd03      	ble.n	8000ae8 <ST7735_FillRectangle+0x40>
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000ae6:	807b      	strh	r3, [r7, #2]
	    if (y + h > ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	883b      	ldrh	r3, [r7, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	2b80      	cmp	r3, #128	@ 0x80
 8000af0:	dd03      	ble.n	8000afa <ST7735_FillRectangle+0x52>
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000af8:	803b      	strh	r3, [r7, #0]

	    // Wybór wyświetlacza i ustawienie okna adresowego
	    //ST7735_Select();
	    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	88bb      	ldrh	r3, [r7, #4]
 8000b00:	b2d9      	uxtb	r1, r3
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b2dc      	uxtb	r4, r3
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	883b      	ldrh	r3, [r7, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4622      	mov	r2, r4
 8000b24:	f7ff fe99 	bl	800085a <ST7735_SetAddressWindow>

	    // Przygotowanie danych pikseli
	    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b28:	8c3b      	ldrh	r3, [r7, #32]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	723b      	strb	r3, [r7, #8]
 8000b32:	8c3b      	ldrh	r3, [r7, #32]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	727b      	strb	r3, [r7, #9]

	    //HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);

	    // Wysyłanie danych pikseli w blokach
	    for (uint16_t row = 0; row < h; ++row) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81fb      	strh	r3, [r7, #14]
 8000b3c:	e012      	b.n	8000b64 <ST7735_FillRectangle+0xbc>
	        for (uint16_t col = 0; col < w; ++col) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	81bb      	strh	r3, [r7, #12]
 8000b42:	e008      	b.n	8000b56 <ST7735_FillRectangle+0xae>
	            ST7735_WriteData(data, sizeof(data));
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe04 	bl	8000758 <ST7735_WriteData>
	        for (uint16_t col = 0; col < w; ++col) {
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
 8000b54:	81bb      	strh	r3, [r7, #12]
 8000b56:	89ba      	ldrh	r2, [r7, #12]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3f2      	bcc.n	8000b44 <ST7735_FillRectangle+0x9c>
	    for (uint16_t row = 0; row < h; ++row) {
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	3301      	adds	r3, #1
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	89fa      	ldrh	r2, [r7, #14]
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3e8      	bcc.n	8000b3e <ST7735_FillRectangle+0x96>
	        }
	    }

	    // Odseparowanie wyświetlacza
	  ST7735_Unselect();
 8000b6c:	f7ff fdb6 	bl	80006dc <ST7735_Unselect>
 8000b70:	e000      	b.n	8000b74 <ST7735_FillRectangle+0xcc>
	    if (x >= ST7735_WIDTH || y >= ST7735_HEIGHT) return;
 8000b72:	bf00      	nop
}
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}

08000b7a <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b7a:	b590      	push	{r4, r7, lr}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4604      	mov	r4, r0
 8000b82:	4608      	mov	r0, r1
 8000b84:	4611      	mov	r1, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	4623      	mov	r3, r4
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	80bb      	strh	r3, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b9c:	d861      	bhi.n	8000c62 <ST7735_FillRectangleFast+0xe8>
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba2:	d85e      	bhi.n	8000c62 <ST7735_FillRectangleFast+0xe8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	4413      	add	r3, r2
 8000baa:	2ba0      	cmp	r3, #160	@ 0xa0
 8000bac:	dd03      	ble.n	8000bb6 <ST7735_FillRectangleFast+0x3c>
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000bb4:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000bb6:	88ba      	ldrh	r2, [r7, #4]
 8000bb8:	883b      	ldrh	r3, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	2b80      	cmp	r3, #128	@ 0x80
 8000bbe:	dd03      	ble.n	8000bc8 <ST7735_FillRectangleFast+0x4e>
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000bc6:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000bc8:	f7ff fd78 	bl	80006bc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	b2d9      	uxtb	r1, r3
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b2dc      	uxtb	r4, r3
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	883b      	ldrh	r3, [r7, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4622      	mov	r2, r4
 8000bf6:	f7ff fe30 	bl	800085a <ST7735_SetAddressWindow>

    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000bfa:	8c3b      	ldrh	r3, [r7, #32]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	723b      	strb	r3, [r7, #8]
 8000c04:	8c3b      	ldrh	r3, [r7, #32]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f9f6 	bl	8002000 <malloc>
 8000c14:	4603      	mov	r3, r0
 8000c16:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	80fb      	strh	r3, [r7, #6]
 8000c1c:	e008      	b.n	8000c30 <ST7735_FillRectangleFast+0xb6>
        memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4413      	add	r3, r2
 8000c26:	893a      	ldrh	r2, [r7, #8]
 8000c28:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	80fb      	strh	r3, [r7, #6]
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3f2      	bcc.n	8000c1e <ST7735_FillRectangleFast+0xa4>

    for(y = h; y > 0; y--)
 8000c38:	883b      	ldrh	r3, [r7, #0]
 8000c3a:	80bb      	strh	r3, [r7, #4]
 8000c3c:	e008      	b.n	8000c50 <ST7735_FillRectangleFast+0xd6>
        ST7735_WriteData(line, w * sizeof(pixel));
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fd87 	bl	8000758 <ST7735_WriteData>
    for(y = h; y > 0; y--)
 8000c4a:	88bb      	ldrh	r3, [r7, #4]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	80bb      	strh	r3, [r7, #4]
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f3      	bne.n	8000c3e <ST7735_FillRectangleFast+0xc4>

    free(line);
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f001 f9da 	bl	8002010 <free>
    ST7735_Unselect();
 8000c5c:	f7ff fd3e 	bl	80006dc <ST7735_Unselect>
 8000c60:	e000      	b.n	8000c64 <ST7735_FillRectangleFast+0xea>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c62:	bf00      	nop
}
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}

08000c6a <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af02      	add	r7, sp, #8
 8000c70:	4603      	mov	r3, r0
 8000c72:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2380      	movs	r3, #128	@ 0x80
 8000c7a:	22a0      	movs	r2, #160	@ 0xa0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff12 	bl	8000aa8 <ST7735_FillRectangle>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	22a0      	movs	r2, #160	@ 0xa0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff6a 	bl	8000b7a <ST7735_FillRectangleFast>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f92b 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fc18 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f935 	bl	8000f6a <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f90b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000010 	.word	0x20000010
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	200000d0 	.word	0x200000d0

08000d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	@ (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200000d0 	.word	0x200000d0

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fff0 	bl	8000d60 <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffe0 	bl	8000d60 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000010 	.word	0x20000010

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff90 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff49 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff5e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffb0 	bl	8000ed8 <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b08b      	sub	sp, #44	@ 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	e169      	b.n	800126c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8158 	bne.w	8001266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a9a      	ldr	r2, [pc, #616]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d05e      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d875      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a98      	ldr	r2, [pc, #608]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d058      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fcc:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d86f      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a96      	ldr	r2, [pc, #600]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d052      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fd8:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d869      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fde:	4a94      	ldr	r2, [pc, #592]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d04c      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fe4:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d863      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fea:	4a92      	ldr	r2, [pc, #584]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d046      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000ff0:	4a90      	ldr	r2, [pc, #576]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d85d      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d82a      	bhi.n	8001050 <HAL_GPIO_Init+0xcc>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d859      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8001004 <HAL_GPIO_Init+0x80>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	0800107f 	.word	0x0800107f
 8001008:	08001059 	.word	0x08001059
 800100c:	0800106b 	.word	0x0800106b
 8001010:	080010ad 	.word	0x080010ad
 8001014:	080010b3 	.word	0x080010b3
 8001018:	080010b3 	.word	0x080010b3
 800101c:	080010b3 	.word	0x080010b3
 8001020:	080010b3 	.word	0x080010b3
 8001024:	080010b3 	.word	0x080010b3
 8001028:	080010b3 	.word	0x080010b3
 800102c:	080010b3 	.word	0x080010b3
 8001030:	080010b3 	.word	0x080010b3
 8001034:	080010b3 	.word	0x080010b3
 8001038:	080010b3 	.word	0x080010b3
 800103c:	080010b3 	.word	0x080010b3
 8001040:	080010b3 	.word	0x080010b3
 8001044:	080010b3 	.word	0x080010b3
 8001048:	08001061 	.word	0x08001061
 800104c:	08001075 	.word	0x08001075
 8001050:	4a79      	ldr	r2, [pc, #484]	@ (8001238 <HAL_GPIO_Init+0x2b4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001056:	e02c      	b.n	80010b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e029      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e024      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3308      	adds	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e01f      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	330c      	adds	r3, #12
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e01a      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001086:	2304      	movs	r3, #4
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e013      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	611a      	str	r2, [r3, #16]
          break;
 800109e:	e009      	b.n	80010b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
          break;
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          break;
 80010b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d801      	bhi.n	80010be <HAL_GPIO_Init+0x13a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_Init+0x13e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d802      	bhi.n	80010d0 <HAL_GPIO_Init+0x14c>
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x152>
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	3b08      	subs	r3, #8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	210f      	movs	r1, #15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80b1 	beq.w	8001266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001104:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a4c      	ldr	r2, [pc, #304]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800111c:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <HAL_GPIO_Init+0x2c0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3f      	ldr	r2, [pc, #252]	@ (8001248 <HAL_GPIO_Init+0x2c4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3e      	ldr	r2, [pc, #248]	@ (800124c <HAL_GPIO_Init+0x2c8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3d      	ldr	r2, [pc, #244]	@ (8001250 <HAL_GPIO_Init+0x2cc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1e0>
 8001160:	2303      	movs	r3, #3
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001164:	2304      	movs	r3, #4
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001170:	2300      	movs	r3, #0
 8001172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	492f      	ldr	r1, [pc, #188]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	492c      	ldr	r1, [pc, #176]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4928      	ldr	r1, [pc, #160]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4922      	ldr	r1, [pc, #136]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	491e      	ldr	r1, [pc, #120]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4918      	ldr	r1, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001204:	4013      	ands	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d021      	beq.n	8001258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e021      	b.n	8001266 <HAL_GPIO_Init+0x2e2>
 8001222:	bf00      	nop
 8001224:	10320000 	.word	0x10320000
 8001228:	10310000 	.word	0x10310000
 800122c:	10220000 	.word	0x10220000
 8001230:	10210000 	.word	0x10210000
 8001234:	10120000 	.word	0x10120000
 8001238:	10110000 	.word	0x10110000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40011000 	.word	0x40011000
 8001250:	40011400 	.word	0x40011400
 8001254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_GPIO_Init+0x304>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	4909      	ldr	r1, [pc, #36]	@ (8001288 <HAL_GPIO_Init+0x304>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f ae8e 	bne.w	8000f98 <HAL_GPIO_Init+0x14>
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e272      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8087 	beq.w	80013ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012dc:	4b92      	ldr	r3, [pc, #584]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d00c      	beq.n	8001302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d112      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
 80012f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001300:	d10b      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d06c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x12c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d168      	bne.n	80013e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e24c      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x76>
 8001324:	4b80      	ldr	r3, [pc, #512]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a7f      	ldr	r2, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e02e      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b7b      	ldr	r3, [pc, #492]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7a      	ldr	r2, [pc, #488]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b78      	ldr	r3, [pc, #480]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a77      	ldr	r2, [pc, #476]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0xbc>
 800135e:	4b72      	ldr	r3, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a71      	ldr	r2, [pc, #452]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b6f      	ldr	r3, [pc, #444]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6e      	ldr	r2, [pc, #440]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001378:	4b6b      	ldr	r3, [pc, #428]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6a      	ldr	r2, [pc, #424]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a67      	ldr	r2, [pc, #412]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fce2 	bl	8000d60 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcde 	bl	8000d60 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e200      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe4>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fcce 	bl	8000d60 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fcca 	bl	8000d60 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1ec      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x10c>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001402:	4b49      	ldr	r3, [pc, #292]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
 800140e:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1c0      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4939      	ldr	r1, [pc, #228]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fc83 	bl	8000d60 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc7f 	bl	8000d60 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1a1      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4927      	ldr	r1, [pc, #156]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc62 	bl	8000d60 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc5e 	bl	8000d60 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e180      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d03a      	beq.n	8001540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_RCC_OscConfig+0x274>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fc42 	bl	8000d60 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc3e 	bl	8000d60 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e160      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fa9c 	bl	8001a3c <RCC_Delay>
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_RCC_OscConfig+0x274>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fc28 	bl	8000d60 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001512:	e00f      	b.n	8001534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fc24 	bl	8000d60 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d908      	bls.n	8001534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e146      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	42420000 	.word	0x42420000
 8001530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e9      	bne.n	8001514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a6 	beq.w	800169a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b8b      	ldr	r3, [pc, #556]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b88      	ldr	r3, [pc, #544]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a87      	ldr	r2, [pc, #540]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b85      	ldr	r3, [pc, #532]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b82      	ldr	r3, [pc, #520]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b7f      	ldr	r3, [pc, #508]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7e      	ldr	r2, [pc, #504]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fbe5 	bl	8000d60 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fbe1 	bl	8000d60 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	@ 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e103      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b75      	ldr	r3, [pc, #468]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	e02d      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x334>
 80015d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a69      	ldr	r2, [pc, #420]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b67      	ldr	r3, [pc, #412]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a66      	ldr	r2, [pc, #408]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	e01c      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x356>
 80015f8:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a60      	ldr	r2, [pc, #384]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a5d      	ldr	r2, [pc, #372]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 8001612:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a5a      	ldr	r2, [pc, #360]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a57      	ldr	r2, [pc, #348]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb95 	bl	8000d60 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fb91 	bl	8000d60 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0b1      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ee      	beq.n	800163a <HAL_RCC_OscConfig+0x37e>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb7f 	bl	8000d60 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb7b 	bl	8000d60 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e09b      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d061      	beq.n	8001774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d146      	bne.n	8001746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fb4f 	bl	8000d60 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fb4b 	bl	8000d60 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e06d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4921      	ldr	r1, [pc, #132]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a19      	ldr	r1, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	430b      	orrs	r3, r1
 8001712:	491b      	ldr	r1, [pc, #108]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb1f 	bl	8000d60 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb1b 	bl	8000d60 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e03d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x46a>
 8001744:	e035      	b.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb08 	bl	8000d60 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fb04 	bl	8000d60 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e026      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x498>
 8001772:	e01e      	b.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e019      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
 8001788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_RCC_OscConfig+0x500>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	429a      	cmp	r2, r3
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d0      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b67      	ldr	r3, [pc, #412]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4965      	ldr	r1, [pc, #404]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800183e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d040      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d115      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e073      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06b      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4936      	ldr	r1, [pc, #216]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa56 	bl	8000d60 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa52 	bl	8000d60 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e053      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d210      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4922      	ldr	r1, [pc, #136]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	@ (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_RCC_ClockConfig+0x1cc>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f9b4 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000
 8001984:	40021000 	.word	0x40021000
 8001988:	080022b4 	.word	0x080022b4
 800198c:	20000000 	.word	0x20000000
 8001990:	2000000c 	.word	0x2000000c

08001994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d002      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x30>
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x36>
 80019c2:	e027      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	0c5b      	lsrs	r3, r3, #17
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	fb03 f202 	mul.w	r2, r3, r2
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e004      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	613b      	str	r3, [r7, #16]
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a16:	613b      	str	r3, [r7, #16]
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	693b      	ldr	r3, [r7, #16]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	007a1200 	.word	0x007a1200
 8001a30:	08003098 	.word	0x08003098
 8001a34:	080030a8 	.word	0x080030a8
 8001a38:	003d0900 	.word	0x003d0900

08001a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a44:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <RCC_Delay+0x34>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <RCC_Delay+0x38>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a58:	bf00      	nop
  }
  while (Delay --);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	60fa      	str	r2, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f9      	bne.n	8001a58 <RCC_Delay+0x1c>
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000000 	.word	0x20000000
 8001a74:	10624dd3 	.word	0x10624dd3

08001a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e041      	b.n	8001b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fd60 	bl	8000564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f000 f940 	bl	8001d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d001      	beq.n	8001b30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <HAL_TIM_Base_Start+0x88>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_TIM_Base_Start+0x48>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4a:	d009      	beq.n	8001b60 <HAL_TIM_Base_Start+0x48>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_TIM_Base_Start+0x8c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_TIM_Base_Start+0x48>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <HAL_TIM_Base_Start+0x90>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d010      	beq.n	8001b94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800

08001bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0b4      	b.n	8001d32 <HAL_TIM_ConfigClockSource+0x186>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c00:	d03e      	beq.n	8001c80 <HAL_TIM_ConfigClockSource+0xd4>
 8001c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c06:	f200 8087 	bhi.w	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c0e:	f000 8086 	beq.w	8001d1e <HAL_TIM_ConfigClockSource+0x172>
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c16:	d87f      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c18:	2b70      	cmp	r3, #112	@ 0x70
 8001c1a:	d01a      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0xa6>
 8001c1c:	2b70      	cmp	r3, #112	@ 0x70
 8001c1e:	d87b      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c20:	2b60      	cmp	r3, #96	@ 0x60
 8001c22:	d050      	beq.n	8001cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8001c24:	2b60      	cmp	r3, #96	@ 0x60
 8001c26:	d877      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c28:	2b50      	cmp	r3, #80	@ 0x50
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8001c2c:	2b50      	cmp	r3, #80	@ 0x50
 8001c2e:	d873      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c30:	2b40      	cmp	r3, #64	@ 0x40
 8001c32:	d058      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8001c34:	2b40      	cmp	r3, #64	@ 0x40
 8001c36:	d86f      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c38:	2b30      	cmp	r3, #48	@ 0x30
 8001c3a:	d064      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c3c:	2b30      	cmp	r3, #48	@ 0x30
 8001c3e:	d86b      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d060      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d867      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d05c      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d05a      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c50:	e062      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c62:	f000 f950 	bl	8001f06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	609a      	str	r2, [r3, #8]
      break;
 8001c7e:	e04f      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c90:	f000 f939 	bl	8001f06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ca2:	609a      	str	r2, [r3, #8]
      break;
 8001ca4:	e03c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f000 f8b0 	bl	8001e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2150      	movs	r1, #80	@ 0x50
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f907 	bl	8001ed2 <TIM_ITRx_SetConfig>
      break;
 8001cc4:	e02c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f000 f8ce 	bl	8001e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2160      	movs	r1, #96	@ 0x60
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f8f7 	bl	8001ed2 <TIM_ITRx_SetConfig>
      break;
 8001ce4:	e01c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f000 f890 	bl	8001e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f8e7 	bl	8001ed2 <TIM_ITRx_SetConfig>
      break;
 8001d04:	e00c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f000 f8de 	bl	8001ed2 <TIM_ITRx_SetConfig>
      break;
 8001d16:	e003      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1c:	e000      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e0c <TIM_Base_SetConfig+0xd0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_Base_SetConfig+0x30>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5a:	d007      	beq.n	8001d6c <TIM_Base_SetConfig+0x30>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <TIM_Base_SetConfig+0xd4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_Base_SetConfig+0x30>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <TIM_Base_SetConfig+0xd8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d108      	bne.n	8001d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <TIM_Base_SetConfig+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00b      	beq.n	8001d9e <TIM_Base_SetConfig+0x62>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d007      	beq.n	8001d9e <TIM_Base_SetConfig+0x62>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <TIM_Base_SetConfig+0xd4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d003      	beq.n	8001d9e <TIM_Base_SetConfig+0x62>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <TIM_Base_SetConfig+0xd8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d108      	bne.n	8001db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <TIM_Base_SetConfig+0xd0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d103      	bne.n	8001de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f023 0201 	bic.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
  }
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800

08001e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 0201 	bic.w	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f023 030a 	bic.w	r3, r3, #10
 8001e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	621a      	str	r2, [r3, #32]
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f023 0210 	bic.w	r2, r3, #16
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	031b      	lsls	r3, r3, #12
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	621a      	str	r2, [r3, #32]
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f043 0307 	orr.w	r3, r3, #7
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	609a      	str	r2, [r3, #8]
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e046      	b.n	8001fea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	@ (8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d009      	beq.n	8001fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800

08002000 <malloc>:
 8002000:	4b02      	ldr	r3, [pc, #8]	@ (800200c <malloc+0xc>)
 8002002:	4601      	mov	r1, r0
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f000 b82d 	b.w	8002064 <_malloc_r>
 800200a:	bf00      	nop
 800200c:	20000014 	.word	0x20000014

08002010 <free>:
 8002010:	4b02      	ldr	r3, [pc, #8]	@ (800201c <free+0xc>)
 8002012:	4601      	mov	r1, r0
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f000 b8f5 	b.w	8002204 <_free_r>
 800201a:	bf00      	nop
 800201c:	20000014 	.word	0x20000014

08002020 <sbrk_aligned>:
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4e0f      	ldr	r6, [pc, #60]	@ (8002060 <sbrk_aligned+0x40>)
 8002024:	460c      	mov	r4, r1
 8002026:	6831      	ldr	r1, [r6, #0]
 8002028:	4605      	mov	r5, r0
 800202a:	b911      	cbnz	r1, 8002032 <sbrk_aligned+0x12>
 800202c:	f000 f8ae 	bl	800218c <_sbrk_r>
 8002030:	6030      	str	r0, [r6, #0]
 8002032:	4621      	mov	r1, r4
 8002034:	4628      	mov	r0, r5
 8002036:	f000 f8a9 	bl	800218c <_sbrk_r>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d103      	bne.n	8002046 <sbrk_aligned+0x26>
 800203e:	f04f 34ff 	mov.w	r4, #4294967295
 8002042:	4620      	mov	r0, r4
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	1cc4      	adds	r4, r0, #3
 8002048:	f024 0403 	bic.w	r4, r4, #3
 800204c:	42a0      	cmp	r0, r4
 800204e:	d0f8      	beq.n	8002042 <sbrk_aligned+0x22>
 8002050:	1a21      	subs	r1, r4, r0
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f89a 	bl	800218c <_sbrk_r>
 8002058:	3001      	adds	r0, #1
 800205a:	d1f2      	bne.n	8002042 <sbrk_aligned+0x22>
 800205c:	e7ef      	b.n	800203e <sbrk_aligned+0x1e>
 800205e:	bf00      	nop
 8002060:	200000d4 	.word	0x200000d4

08002064 <_malloc_r>:
 8002064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	1ccd      	adds	r5, r1, #3
 800206a:	f025 0503 	bic.w	r5, r5, #3
 800206e:	3508      	adds	r5, #8
 8002070:	2d0c      	cmp	r5, #12
 8002072:	bf38      	it	cc
 8002074:	250c      	movcc	r5, #12
 8002076:	2d00      	cmp	r5, #0
 8002078:	4606      	mov	r6, r0
 800207a:	db01      	blt.n	8002080 <_malloc_r+0x1c>
 800207c:	42a9      	cmp	r1, r5
 800207e:	d904      	bls.n	800208a <_malloc_r+0x26>
 8002080:	230c      	movs	r3, #12
 8002082:	6033      	str	r3, [r6, #0]
 8002084:	2000      	movs	r0, #0
 8002086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800208a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002160 <_malloc_r+0xfc>
 800208e:	f000 f869 	bl	8002164 <__malloc_lock>
 8002092:	f8d8 3000 	ldr.w	r3, [r8]
 8002096:	461c      	mov	r4, r3
 8002098:	bb44      	cbnz	r4, 80020ec <_malloc_r+0x88>
 800209a:	4629      	mov	r1, r5
 800209c:	4630      	mov	r0, r6
 800209e:	f7ff ffbf 	bl	8002020 <sbrk_aligned>
 80020a2:	1c43      	adds	r3, r0, #1
 80020a4:	4604      	mov	r4, r0
 80020a6:	d158      	bne.n	800215a <_malloc_r+0xf6>
 80020a8:	f8d8 4000 	ldr.w	r4, [r8]
 80020ac:	4627      	mov	r7, r4
 80020ae:	2f00      	cmp	r7, #0
 80020b0:	d143      	bne.n	800213a <_malloc_r+0xd6>
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d04b      	beq.n	800214e <_malloc_r+0xea>
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	4639      	mov	r1, r7
 80020ba:	4630      	mov	r0, r6
 80020bc:	eb04 0903 	add.w	r9, r4, r3
 80020c0:	f000 f864 	bl	800218c <_sbrk_r>
 80020c4:	4581      	cmp	r9, r0
 80020c6:	d142      	bne.n	800214e <_malloc_r+0xea>
 80020c8:	6821      	ldr	r1, [r4, #0]
 80020ca:	4630      	mov	r0, r6
 80020cc:	1a6d      	subs	r5, r5, r1
 80020ce:	4629      	mov	r1, r5
 80020d0:	f7ff ffa6 	bl	8002020 <sbrk_aligned>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d03a      	beq.n	800214e <_malloc_r+0xea>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	442b      	add	r3, r5
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	f8d8 3000 	ldr.w	r3, [r8]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	bb62      	cbnz	r2, 8002140 <_malloc_r+0xdc>
 80020e6:	f8c8 7000 	str.w	r7, [r8]
 80020ea:	e00f      	b.n	800210c <_malloc_r+0xa8>
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	1b52      	subs	r2, r2, r5
 80020f0:	d420      	bmi.n	8002134 <_malloc_r+0xd0>
 80020f2:	2a0b      	cmp	r2, #11
 80020f4:	d917      	bls.n	8002126 <_malloc_r+0xc2>
 80020f6:	1961      	adds	r1, r4, r5
 80020f8:	42a3      	cmp	r3, r4
 80020fa:	6025      	str	r5, [r4, #0]
 80020fc:	bf18      	it	ne
 80020fe:	6059      	strne	r1, [r3, #4]
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	bf08      	it	eq
 8002104:	f8c8 1000 	streq.w	r1, [r8]
 8002108:	5162      	str	r2, [r4, r5]
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	4630      	mov	r0, r6
 800210e:	f000 f82f 	bl	8002170 <__malloc_unlock>
 8002112:	f104 000b 	add.w	r0, r4, #11
 8002116:	1d23      	adds	r3, r4, #4
 8002118:	f020 0007 	bic.w	r0, r0, #7
 800211c:	1ac2      	subs	r2, r0, r3
 800211e:	bf1c      	itt	ne
 8002120:	1a1b      	subne	r3, r3, r0
 8002122:	50a3      	strne	r3, [r4, r2]
 8002124:	e7af      	b.n	8002086 <_malloc_r+0x22>
 8002126:	6862      	ldr	r2, [r4, #4]
 8002128:	42a3      	cmp	r3, r4
 800212a:	bf0c      	ite	eq
 800212c:	f8c8 2000 	streq.w	r2, [r8]
 8002130:	605a      	strne	r2, [r3, #4]
 8002132:	e7eb      	b.n	800210c <_malloc_r+0xa8>
 8002134:	4623      	mov	r3, r4
 8002136:	6864      	ldr	r4, [r4, #4]
 8002138:	e7ae      	b.n	8002098 <_malloc_r+0x34>
 800213a:	463c      	mov	r4, r7
 800213c:	687f      	ldr	r7, [r7, #4]
 800213e:	e7b6      	b.n	80020ae <_malloc_r+0x4a>
 8002140:	461a      	mov	r2, r3
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	42a3      	cmp	r3, r4
 8002146:	d1fb      	bne.n	8002140 <_malloc_r+0xdc>
 8002148:	2300      	movs	r3, #0
 800214a:	6053      	str	r3, [r2, #4]
 800214c:	e7de      	b.n	800210c <_malloc_r+0xa8>
 800214e:	230c      	movs	r3, #12
 8002150:	4630      	mov	r0, r6
 8002152:	6033      	str	r3, [r6, #0]
 8002154:	f000 f80c 	bl	8002170 <__malloc_unlock>
 8002158:	e794      	b.n	8002084 <_malloc_r+0x20>
 800215a:	6005      	str	r5, [r0, #0]
 800215c:	e7d6      	b.n	800210c <_malloc_r+0xa8>
 800215e:	bf00      	nop
 8002160:	200000d8 	.word	0x200000d8

08002164 <__malloc_lock>:
 8002164:	4801      	ldr	r0, [pc, #4]	@ (800216c <__malloc_lock+0x8>)
 8002166:	f000 b84b 	b.w	8002200 <__retarget_lock_acquire_recursive>
 800216a:	bf00      	nop
 800216c:	20000218 	.word	0x20000218

08002170 <__malloc_unlock>:
 8002170:	4801      	ldr	r0, [pc, #4]	@ (8002178 <__malloc_unlock+0x8>)
 8002172:	f000 b846 	b.w	8002202 <__retarget_lock_release_recursive>
 8002176:	bf00      	nop
 8002178:	20000218 	.word	0x20000218

0800217c <memset>:
 800217c:	4603      	mov	r3, r0
 800217e:	4402      	add	r2, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <_sbrk_r>:
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	2300      	movs	r3, #0
 8002190:	4d05      	ldr	r5, [pc, #20]	@ (80021a8 <_sbrk_r+0x1c>)
 8002192:	4604      	mov	r4, r0
 8002194:	4608      	mov	r0, r1
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	f7fe fa2e 	bl	80005f8 <_sbrk>
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d102      	bne.n	80021a6 <_sbrk_r+0x1a>
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	b103      	cbz	r3, 80021a6 <_sbrk_r+0x1a>
 80021a4:	6023      	str	r3, [r4, #0]
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
 80021a8:	20000214 	.word	0x20000214

080021ac <__errno>:
 80021ac:	4b01      	ldr	r3, [pc, #4]	@ (80021b4 <__errno+0x8>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000014 	.word	0x20000014

080021b8 <__libc_init_array>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	2600      	movs	r6, #0
 80021bc:	4d0c      	ldr	r5, [pc, #48]	@ (80021f0 <__libc_init_array+0x38>)
 80021be:	4c0d      	ldr	r4, [pc, #52]	@ (80021f4 <__libc_init_array+0x3c>)
 80021c0:	1b64      	subs	r4, r4, r5
 80021c2:	10a4      	asrs	r4, r4, #2
 80021c4:	42a6      	cmp	r6, r4
 80021c6:	d109      	bne.n	80021dc <__libc_init_array+0x24>
 80021c8:	f000 f864 	bl	8002294 <_init>
 80021cc:	2600      	movs	r6, #0
 80021ce:	4d0a      	ldr	r5, [pc, #40]	@ (80021f8 <__libc_init_array+0x40>)
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <__libc_init_array+0x44>)
 80021d2:	1b64      	subs	r4, r4, r5
 80021d4:	10a4      	asrs	r4, r4, #2
 80021d6:	42a6      	cmp	r6, r4
 80021d8:	d105      	bne.n	80021e6 <__libc_init_array+0x2e>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e0:	4798      	blx	r3
 80021e2:	3601      	adds	r6, #1
 80021e4:	e7ee      	b.n	80021c4 <__libc_init_array+0xc>
 80021e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ea:	4798      	blx	r3
 80021ec:	3601      	adds	r6, #1
 80021ee:	e7f2      	b.n	80021d6 <__libc_init_array+0x1e>
 80021f0:	080030ac 	.word	0x080030ac
 80021f4:	080030ac 	.word	0x080030ac
 80021f8:	080030ac 	.word	0x080030ac
 80021fc:	080030b0 	.word	0x080030b0

08002200 <__retarget_lock_acquire_recursive>:
 8002200:	4770      	bx	lr

08002202 <__retarget_lock_release_recursive>:
 8002202:	4770      	bx	lr

08002204 <_free_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4605      	mov	r5, r0
 8002208:	2900      	cmp	r1, #0
 800220a:	d040      	beq.n	800228e <_free_r+0x8a>
 800220c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002210:	1f0c      	subs	r4, r1, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	bfb8      	it	lt
 8002216:	18e4      	addlt	r4, r4, r3
 8002218:	f7ff ffa4 	bl	8002164 <__malloc_lock>
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <_free_r+0x8c>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	b933      	cbnz	r3, 8002230 <_free_r+0x2c>
 8002222:	6063      	str	r3, [r4, #4]
 8002224:	6014      	str	r4, [r2, #0]
 8002226:	4628      	mov	r0, r5
 8002228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800222c:	f7ff bfa0 	b.w	8002170 <__malloc_unlock>
 8002230:	42a3      	cmp	r3, r4
 8002232:	d908      	bls.n	8002246 <_free_r+0x42>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	1821      	adds	r1, r4, r0
 8002238:	428b      	cmp	r3, r1
 800223a:	bf01      	itttt	eq
 800223c:	6819      	ldreq	r1, [r3, #0]
 800223e:	685b      	ldreq	r3, [r3, #4]
 8002240:	1809      	addeq	r1, r1, r0
 8002242:	6021      	streq	r1, [r4, #0]
 8002244:	e7ed      	b.n	8002222 <_free_r+0x1e>
 8002246:	461a      	mov	r2, r3
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	b10b      	cbz	r3, 8002250 <_free_r+0x4c>
 800224c:	42a3      	cmp	r3, r4
 800224e:	d9fa      	bls.n	8002246 <_free_r+0x42>
 8002250:	6811      	ldr	r1, [r2, #0]
 8002252:	1850      	adds	r0, r2, r1
 8002254:	42a0      	cmp	r0, r4
 8002256:	d10b      	bne.n	8002270 <_free_r+0x6c>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	4401      	add	r1, r0
 800225c:	1850      	adds	r0, r2, r1
 800225e:	4283      	cmp	r3, r0
 8002260:	6011      	str	r1, [r2, #0]
 8002262:	d1e0      	bne.n	8002226 <_free_r+0x22>
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4408      	add	r0, r1
 800226a:	6010      	str	r0, [r2, #0]
 800226c:	6053      	str	r3, [r2, #4]
 800226e:	e7da      	b.n	8002226 <_free_r+0x22>
 8002270:	d902      	bls.n	8002278 <_free_r+0x74>
 8002272:	230c      	movs	r3, #12
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	e7d6      	b.n	8002226 <_free_r+0x22>
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	1821      	adds	r1, r4, r0
 800227c:	428b      	cmp	r3, r1
 800227e:	bf01      	itttt	eq
 8002280:	6819      	ldreq	r1, [r3, #0]
 8002282:	685b      	ldreq	r3, [r3, #4]
 8002284:	1809      	addeq	r1, r1, r0
 8002286:	6021      	streq	r1, [r4, #0]
 8002288:	6063      	str	r3, [r4, #4]
 800228a:	6054      	str	r4, [r2, #4]
 800228c:	e7cb      	b.n	8002226 <_free_r+0x22>
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	200000d8 	.word	0x200000d8

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
