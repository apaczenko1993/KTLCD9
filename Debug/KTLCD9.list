
KTLCD9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  08002288  08002288  00003288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003088  08003088  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003088  08003088  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003090  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  080030f8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080030f8  0000521c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f94  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b3  00000000  00000000  0000d025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0000e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079f  00000000  00000000  0000f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b9  00000000  00000000  0000fa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1c5  00000000  00000000  00027330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882a3  00000000  00000000  000324f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  000ba7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002270 	.word	0x08002270

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002270 	.word	0x08002270

0800014c <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void delay_us (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	//__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	//while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}
 8000156:	bf00      	nop
 8000158:	370c      	adds	r7, #12
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fd91 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f883 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f913 	bl	8000398 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000172:	f000 f8c1 	bl	80002f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, GPIO_PIN_SET); // zalaczenie zasilania
 8000176:	2201      	movs	r2, #1
 8000178:	2110      	movs	r1, #16
 800017a:	4838      	ldr	r0, [pc, #224]	@ (800025c <main+0xfc>)
 800017c:	f001 f874 	bl	8001268 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1); // timer start, for us delay in st7735
 8000180:	4837      	ldr	r0, [pc, #220]	@ (8000260 <main+0x100>)
 8000182:	f001 fcb7 	bl	8001af4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin, GPIO_PIN_SET); // ???
 8000186:	2201      	movs	r2, #1
 8000188:	2180      	movs	r1, #128	@ 0x80
 800018a:	4836      	ldr	r0, [pc, #216]	@ (8000264 <main+0x104>)
 800018c:	f001 f86c 	bl	8001268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(T2_GPIO_Port, T2_Pin, GPIO_PIN_SET); // ???
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	@ 0x40
 8000194:	4833      	ldr	r0, [pc, #204]	@ (8000264 <main+0x104>)
 8000196:	f001 f867 	bl	8001268 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, GPIO_PIN_SET); // LCD Backlight
 800019a:	2201      	movs	r2, #1
 800019c:	2180      	movs	r1, #128	@ 0x80
 800019e:	482f      	ldr	r0, [pc, #188]	@ (800025c <main+0xfc>)
 80001a0:	f001 f862 	bl	8001268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // LED DIODE
 80001a4:	2200      	movs	r2, #0
 80001a6:	2101      	movs	r1, #1
 80001a8:	482e      	ldr	r0, [pc, #184]	@ (8000264 <main+0x104>)
 80001aa:	f001 f85d 	bl	8001268 <HAL_GPIO_WritePin>
  ST7735_Init();
 80001ae:	f000 fb8d 	bl	80008cc <ST7735_Init>

  HAL_Delay(55);
 80001b2:	2037      	movs	r0, #55	@ 0x37
 80001b4:	f000 fdcc 	bl	8000d50 <HAL_Delay>

  ST7735_FillScreen(ST7735_BLUE);
 80001b8:	201f      	movs	r0, #31
 80001ba:	f000 fd44 	bl	8000c46 <ST7735_FillScreen>
  HAL_Delay(2000);
 80001be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001c2:	f000 fdc5 	bl	8000d50 <HAL_Delay>
  ST7735_FillScreenFast(ST7735_GREEN);
 80001c6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80001ca:	f000 fd4d 	bl	8000c68 <ST7735_FillScreenFast>
  HAL_Delay(2000);
 80001ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001d2:	f000 fdbd 	bl	8000d50 <HAL_Delay>


  //ST7735_DrawImage(0, 0, 128, 128, (uint16_t*)test_img_128x128);
  K1:
  ST7735_FillScreenFast(ST7735_BLACK);
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fd46 	bl	8000c68 <ST7735_FillScreenFast>
  ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80001dc:	4b22      	ldr	r3, [pc, #136]	@ (8000268 <main+0x108>)
 80001de:	2200      	movs	r2, #0
 80001e0:	9202      	str	r2, [sp, #8]
 80001e2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80001e6:	9201      	str	r2, [sp, #4]
 80001e8:	685a      	ldr	r2, [r3, #4]
 80001ea:	9200      	str	r2, [sp, #0]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a1f      	ldr	r2, [pc, #124]	@ (800026c <main+0x10c>)
 80001f0:	2100      	movs	r1, #0
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fbfc 	bl	80009f0 <ST7735_WriteString>
  HAL_Delay(2500);
 80001f8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80001fc:	f000 fda8 	bl	8000d50 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(a<90){
 8000200:	4b1b      	ldr	r3, [pc, #108]	@ (8000270 <main+0x110>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b59      	cmp	r3, #89	@ 0x59
 8000206:	dc05      	bgt.n	8000214 <main+0xb4>
	  		a++;
 8000208:	4b19      	ldr	r3, [pc, #100]	@ (8000270 <main+0x110>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a18      	ldr	r2, [pc, #96]	@ (8000270 <main+0x110>)
 8000210:	6013      	str	r3, [r2, #0]
 8000212:	e00a      	b.n	800022a <main+0xca>
	  	}
	  	else{
	  		a=5;
 8000214:	4b16      	ldr	r3, [pc, #88]	@ (8000270 <main+0x110>)
 8000216:	2205      	movs	r2, #5
 8000218:	601a      	str	r2, [r3, #0]
	  		ST7735_FillScreen(ST7735_BLACK);
 800021a:	2000      	movs	r0, #0
 800021c:	f000 fd13 	bl	8000c46 <ST7735_FillScreen>
	  		HAL_Delay(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000224:	f000 fd94 	bl	8000d50 <HAL_Delay>
	  		goto K1;
 8000228:	e7d5      	b.n	80001d6 <main+0x76>
	  	}

	  	ST7735_FillRectangle(a, 47, 30, 30, ST7735_BLUE);
 800022a:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <main+0x110>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	b298      	uxth	r0, r3
 8000230:	231f      	movs	r3, #31
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	231e      	movs	r3, #30
 8000236:	221e      	movs	r2, #30
 8000238:	212f      	movs	r1, #47	@ 0x2f
 800023a:	f000 fc23 	bl	8000a84 <ST7735_FillRectangle>
	  	ST7735_FillRectangle(a, 85, 30, 30, ST7735_RED);
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <main+0x110>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	b298      	uxth	r0, r3
 8000244:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	231e      	movs	r3, #30
 800024c:	221e      	movs	r2, #30
 800024e:	2155      	movs	r1, #85	@ 0x55
 8000250:	f000 fc18 	bl	8000a84 <ST7735_FillRectangle>
	  	HAL_Delay(20);
 8000254:	2014      	movs	r0, #20
 8000256:	f000 fd7b 	bl	8000d50 <HAL_Delay>
	  if(a<90){
 800025a:	e7d1      	b.n	8000200 <main+0xa0>
 800025c:	40010800 	.word	0x40010800
 8000260:	20000084 	.word	0x20000084
 8000264:	40011000 	.word	0x40011000
 8000268:	20000008 	.word	0x20000008
 800026c:	08002288 	.word	0x08002288
 8000270:	20000000 	.word	0x20000000

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 ff68 	bl	8002158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002aa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 ffef 	bl	8001298 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c0:	f000 f906 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fa5c 	bl	800179c <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ea:	f000 f8f1 	bl	80004d0 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	@ 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030c:	463b      	mov	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000314:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000316:	4a1f      	ldr	r2, [pc, #124]	@ (8000394 <MX_TIM1_Init+0x9c>)
 8000318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	@ (8000390 <MX_TIM1_Init+0x98>)
 800031c:	223f      	movs	r2, #63	@ 0x3f
 800031e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000326:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000328:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800032c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000334:	4b16      	ldr	r3, [pc, #88]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000336:	2200      	movs	r2, #0
 8000338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033a:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <MX_TIM1_Init+0x98>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000340:	4813      	ldr	r0, [pc, #76]	@ (8000390 <MX_TIM1_Init+0x98>)
 8000342:	f001 fb87 	bl	8001a54 <HAL_TIM_Base_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800034c:	f000 f8c0 	bl	80004d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	4619      	mov	r1, r3
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <MX_TIM1_Init+0x98>)
 800035e:	f001 fc13 	bl	8001b88 <HAL_TIM_ConfigClockSource>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000368:	f000 f8b2 	bl	80004d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000374:	463b      	mov	r3, r7
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_TIM1_Init+0x98>)
 800037a:	f001 fdd1 	bl	8001f20 <HAL_TIMEx_MasterConfigSynchronization>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000384:	f000 f8a4 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000084 	.word	0x20000084
 8000394:	40012c00 	.word	0x40012c00

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	4b44      	ldr	r3, [pc, #272]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a43      	ldr	r2, [pc, #268]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b41      	ldr	r3, [pc, #260]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b3e      	ldr	r3, [pc, #248]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a3d      	ldr	r2, [pc, #244]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b3b      	ldr	r3, [pc, #236]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b38      	ldr	r3, [pc, #224]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a37      	ldr	r2, [pc, #220]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <MX_GPIO_Init+0x128>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|T2_Pin|T1_Pin|LCD_RD_Pin
 80003f4:	2200      	movs	r2, #0
 80003f6:	f640 71c1 	movw	r1, #4033	@ 0xfc1
 80003fa:	4832      	ldr	r0, [pc, #200]	@ (80004c4 <MX_GPIO_Init+0x12c>)
 80003fc:	f000 ff34 	bl	8001268 <HAL_GPIO_WritePin>
                          |LCD_WR_Pin|LCD_RS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_Pin|BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2190      	movs	r1, #144	@ 0x90
 8000404:	4830      	ldr	r0, [pc, #192]	@ (80004c8 <MX_GPIO_Init+0x130>)
 8000406:	f000 ff2f 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800040a:	2200      	movs	r2, #0
 800040c:	21ff      	movs	r1, #255	@ 0xff
 800040e:	482f      	ldr	r0, [pc, #188]	@ (80004cc <MX_GPIO_Init+0x134>)
 8000410:	f000 ff2a 	bl	8001268 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin T2_Pin T1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|T2_Pin|T1_Pin;
 8000414:	23c1      	movs	r3, #193	@ 0xc1
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2302      	movs	r3, #2
 8000422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	4826      	ldr	r0, [pc, #152]	@ (80004c4 <MX_GPIO_Init+0x12c>)
 800042c:	f000 fd98 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8000430:	2306      	movs	r3, #6
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4820      	ldr	r0, [pc, #128]	@ (80004c4 <MX_GPIO_Init+0x12c>)
 8000444:	f000 fd8c 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_Pin BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = ON_Pin|BACKLIGHT_Pin;
 8000448:	2390      	movs	r3, #144	@ 0x90
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	481a      	ldr	r0, [pc, #104]	@ (80004c8 <MX_GPIO_Init+0x130>)
 8000460:	f000 fd7e 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8000464:	2340      	movs	r3, #64	@ 0x40
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEL_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4814      	ldr	r0, [pc, #80]	@ (80004c8 <MX_GPIO_Init+0x130>)
 8000478:	f000 fd72 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800047c:	23ff      	movs	r3, #255	@ 0xff
 800047e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000488:	2303      	movs	r3, #3
 800048a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	480e      	ldr	r0, [pc, #56]	@ (80004cc <MX_GPIO_Init+0x134>)
 8000494:	f000 fd64 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_CS_Pin;
 8000498:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a6:	2303      	movs	r3, #3
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	4804      	ldr	r0, [pc, #16]	@ (80004c4 <MX_GPIO_Init+0x12c>)
 80004b2:	f000 fd55 	bl	8000f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */


/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <Error_Handler+0x8>

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <HAL_TIM_Base_MspInit+0x34>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10b      	bne.n	800056a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_TIM_Base_MspInit+0x38>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_TIM_Base_MspInit+0x38>)
 8000558:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_TIM_Base_MspInit+0x38>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40012c00 	.word	0x40012c00
 8000578:	40021000 	.word	0x40021000

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 fba4 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	@ (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f001 fdc0 	bl	8002188 <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20005000 	.word	0x20005000
 8000634:	00000400 	.word	0x00000400
 8000638:	200000cc 	.word	0x200000cc
 800063c:	20000220 	.word	0x20000220

08000640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800064c:	f7ff fff8 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000652:	490c      	ldr	r1, [pc, #48]	@ (8000684 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000654:	4a0c      	ldr	r2, [pc, #48]	@ (8000688 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a09      	ldr	r2, [pc, #36]	@ (800068c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000668:	4c09      	ldr	r4, [pc, #36]	@ (8000690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f001 fd8d 	bl	8002194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fd71 	bl	8000160 <main>
  bx lr
 800067e:	4770      	bx	lr
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000688:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 800068c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000690:	2000021c 	.word	0x2000021c

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <ST7735_Select+0x1c>)
 80006a4:	f000 fde0 	bl	8001268 <HAL_GPIO_WritePin>
	delay_us(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fd4f 	bl	800014c <delay_us>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40011000 	.word	0x40011000

080006b8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <ST7735_Unselect+0x1c>)
 80006c4:	f000 fdd0 	bl	8001268 <HAL_GPIO_WritePin>
	delay_us(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff fd3f 	bl	800014c <delay_us>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40011000 	.word	0x40011000

080006d8 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]


    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);  // RS/DCX = 0 dla komendy
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e8:	4810      	ldr	r0, [pc, #64]	@ (800072c <ST7735_WriteCommand+0x54>)
 80006ea:	f000 fdbd 	bl	8001268 <HAL_GPIO_WritePin>
    delay_us(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fd2c 	bl	800014c <delay_us>

    LCD_DATA_PORT->ODR = cmd;  // Ustaw dane na magistrali D0-D7
 80006f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <ST7735_WriteCommand+0x58>)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	60d3      	str	r3, [r2, #12]
    delay_us(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fd26 	bl	800014c <delay_us>

    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);  // WR = 0, inicjacja zapisu
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <ST7735_WriteCommand+0x54>)
 8000708:	f000 fdae 	bl	8001268 <HAL_GPIO_WritePin>
    delay_us(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff fd1d 	bl	800014c <delay_us>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);    // WR = 1, zakończenie zapisu
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <ST7735_WriteCommand+0x54>)
 800071a:	f000 fda5 	bl	8001268 <HAL_GPIO_WritePin>
    delay_us(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd14 	bl	800014c <delay_us>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40011000 	.word	0x40011000
 8000730:	40010c00 	.word	0x40010c00

08000734 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);  // RS/DCX = 1 dla danych
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000744:	4815      	ldr	r0, [pc, #84]	@ (800079c <ST7735_WriteData+0x68>)
 8000746:	f000 fd8f 	bl	8001268 <HAL_GPIO_WritePin>
	delay_us(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff fcfe 	bl	800014c <delay_us>

    while (buff_size--) {
 8000750:	e01a      	b.n	8000788 <ST7735_WriteData+0x54>
        LCD_DATA_PORT->ODR = *buff++;  // Ustaw dane na magistrali D0-D7
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <ST7735_WriteData+0x6c>)
 800075c:	60da      	str	r2, [r3, #12]
        delay_us(1);  // Opóźnienie po ustawieniu danych (TDHT)
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fcf4 	bl	800014c <delay_us>

        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);  // WR = 0, inicjacja zapisu
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <ST7735_WriteData+0x68>)
 800076c:	f000 fd7c 	bl	8001268 <HAL_GPIO_WritePin>
        delay_us(1);  // Opóźnienie po WR = 0 (TWRL)
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fceb 	bl	800014c <delay_us>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);    // WR = 1, zakończenie zapisu
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077c:	4807      	ldr	r0, [pc, #28]	@ (800079c <ST7735_WriteData+0x68>)
 800077e:	f000 fd73 	bl	8001268 <HAL_GPIO_WritePin>
        delay_us(1);  // Opóźnienie po WR = 1 (TWRH)
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fce2 	bl	800014c <delay_us>
    while (buff_size--) {
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	603a      	str	r2, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1df      	bne.n	8000752 <ST7735_WriteData+0x1e>
    }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40011000 	.word	0x40011000
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80007b6:	e034      	b.n	8000822 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80007c2:	7afb      	ldrb	r3, [r7, #11]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff87 	bl	80006d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	72bb      	strb	r3, [r7, #10]
        ms = numArgs & DELAY;
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80007e6:	7abb      	ldrb	r3, [r7, #10]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80007ec:	7abb      	ldrb	r3, [r7, #10]
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff9f 	bl	8000734 <ST7735_WriteData>
            addr += numArgs;
 80007f6:	7abb      	ldrb	r3, [r7, #10]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00e      	beq.n	8000822 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d102      	bne.n	800081a <ST7735_ExecuteCommandList+0x76>
 8000814:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000818:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800081a:	89bb      	ldrh	r3, [r7, #12]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fa97 	bl	8000d50 <HAL_Delay>
    while(numCommands--) {
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	73fa      	strb	r2, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1c5      	bne.n	80007b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b085      	sub	sp, #20
 800083a:	af00      	add	r7, sp, #0
 800083c:	4604      	mov	r4, r0
 800083e:	4608      	mov	r0, r1
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	4623      	mov	r3, r4
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4603      	mov	r3, r0
 800084a:	71bb      	strb	r3, [r7, #6]
 800084c:	460b      	mov	r3, r1
 800084e:	717b      	strb	r3, [r7, #5]
 8000850:	4613      	mov	r3, r2
 8000852:	713b      	strb	r3, [r7, #4]

    ST7735_WriteCommand(ST7735_CASET);
 8000854:	202a      	movs	r0, #42	@ 0x2a
 8000856:	f7ff ff3f 	bl	80006d8 <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fc76 	bl	800014c <delay_us>

    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000860:	2300      	movs	r3, #0
 8000862:	733b      	strb	r3, [r7, #12]
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	3301      	adds	r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	737b      	strb	r3, [r7, #13]
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]
 8000870:	797b      	ldrb	r3, [r7, #5]
 8000872:	3301      	adds	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff58 	bl	8000734 <ST7735_WriteData>
    delay_us(1);  // Opóźnienie po wysłaniu danych (TDST)
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fc61 	bl	800014c <delay_us>

    ST7735_WriteCommand(ST7735_RASET);
 800088a:	202b      	movs	r0, #43	@ 0x2b
 800088c:	f7ff ff24 	bl	80006d8 <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fc5b 	bl	800014c <delay_us>

    data[1] = y0 + ST7735_YSTART;
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	3302      	adds	r3, #2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800089e:	793b      	ldrb	r3, [r7, #4]
 80008a0:	3302      	adds	r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2104      	movs	r1, #4
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff41 	bl	8000734 <ST7735_WriteData>
    delay_us(1);  // Opóźnienie po wysłaniu danych (TDST)
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fc4a 	bl	800014c <delay_us>

    ST7735_WriteCommand(ST7735_RAMWR);
 80008b8:	202c      	movs	r0, #44	@ 0x2c
 80008ba:	f7ff ff0d 	bl	80006d8 <ST7735_WriteCommand>
    delay_us(1);  // Opóźnienie po wysłaniu komendy (TCS)
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fc44 	bl	800014c <delay_us>
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <ST7735_Init>:

    //ST7735_Unselect();

}

void ST7735_Init() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    ST7735_Select();
 80008d0:	f7ff fee2 	bl	8000698 <ST7735_Select>
    //ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <ST7735_Init+0x24>)
 80008d6:	f7ff ff65 	bl	80007a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <ST7735_Init+0x28>)
 80008dc:	f7ff ff62 	bl	80007a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <ST7735_Init+0x2c>)
 80008e2:	f7ff ff5f 	bl	80007a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80008e6:	f7ff fee7 	bl	80006b8 <ST7735_Unselect>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08002ffc 	.word	0x08002ffc
 80008f4:	08003038 	.word	0x08003038
 80008f8:	08003048 	.word	0x08003048

080008fc <ST7735_WriteChar>:



static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008fc:	b082      	sub	sp, #8
 80008fe:	b590      	push	{r4, r7, lr}
 8000900:	b089      	sub	sp, #36	@ 0x24
 8000902:	af00      	add	r7, sp, #0
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	460b      	mov	r3, r1
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ST7735_Select();
 8000912:	f7ff fec1 	bl	8000698 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2d8      	uxtb	r0, r3
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	b2d9      	uxtb	r1, r3
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000926:	4413      	add	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3b01      	subs	r3, #1
 800092c:	b2dc      	uxtb	r4, r3
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000936:	4413      	add	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3b01      	subs	r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4622      	mov	r2, r4
 8000940:	f7ff ff79 	bl	8000836 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	e043      	b.n	80009d2 <ST7735_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 800094a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	3b20      	subs	r3, #32
 8000950:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000954:	fb01 f303 	mul.w	r3, r1, r3
 8000958:	4619      	mov	r1, r3
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	440b      	add	r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	e029      	b.n	80009c0 <ST7735_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00e      	beq.n	800099a <ST7735_WriteChar+0x9e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800097c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	743b      	strb	r3, [r7, #16]
 8000986:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000988:	b2db      	uxtb	r3, r3
 800098a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2102      	movs	r1, #2
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fece 	bl	8000734 <ST7735_WriteData>
 8000998:	e00f      	b.n	80009ba <ST7735_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800099a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	733b      	strb	r3, [r7, #12]
 80009a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff febd 	bl	8000734 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3301      	adds	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009c4:	461a      	mov	r2, r3
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d3cf      	bcc.n	800096c <ST7735_WriteChar+0x70>
    for(i = 0; i < font.height; i++) {
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	3301      	adds	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009d6:	461a      	mov	r2, r3
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	4293      	cmp	r3, r2
 80009dc:	d3b5      	bcc.n	800094a <ST7735_WriteChar+0x4e>
            }
        }
    }
    ST7735_Unselect();
 80009de:	f7ff fe6b 	bl	80006b8 <ST7735_Unselect>
}
 80009e2:	bf00      	nop
 80009e4:	3724      	adds	r7, #36	@ 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009ec:	b002      	add	sp, #8
 80009ee:	4770      	bx	lr

080009f0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009f0:	b082      	sub	sp, #8
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af04      	add	r7, sp, #16
 80009f8:	603a      	str	r2, [r7, #0]
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	4603      	mov	r3, r0
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	460b      	mov	r3, r1
 8000a02:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a04:	f7ff fe48 	bl	8000698 <ST7735_Select>

    while(*str) {
 8000a08:	e02d      	b.n	8000a66 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	7d3a      	ldrb	r2, [r7, #20]
 8000a0e:	4413      	add	r3, r2
 8000a10:	2b9f      	cmp	r3, #159	@ 0x9f
 8000a12:	dd13      	ble.n	8000a3c <ST7735_WriteString+0x4c>
            x = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a18:	7d7b      	ldrb	r3, [r7, #21]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	7d7a      	ldrb	r2, [r7, #21]
 8000a26:	4413      	add	r3, r2
 8000a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a2a:	dc21      	bgt.n	8000a70 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b20      	cmp	r3, #32
 8000a32:	d103      	bne.n	8000a3c <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	603b      	str	r3, [r7, #0]
                continue;
 8000a3a:	e014      	b.n	8000a66 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	88b9      	ldrh	r1, [r7, #4]
 8000a42:	88f8      	ldrh	r0, [r7, #6]
 8000a44:	8c3b      	ldrh	r3, [r7, #32]
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	8bbb      	ldrh	r3, [r7, #28]
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f7ff ff53 	bl	80008fc <ST7735_WriteChar>
        x += font.width;
 8000a56:	7d3b      	ldrb	r3, [r7, #20]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1cd      	bne.n	8000a0a <ST7735_WriteString+0x1a>
 8000a6e:	e000      	b.n	8000a72 <ST7735_WriteString+0x82>
                break;
 8000a70:	bf00      	nop
    }

    ST7735_Unselect();
 8000a72:	f7ff fe21 	bl	80006b8 <ST7735_Unselect>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a80:	b002      	add	sp, #8
 8000a82:	4770      	bx	lr

08000a84 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]

	ST7735_Select(); // funckja z delayem 1us
 8000aa2:	f7ff fdf9 	bl	8000698 <ST7735_Select>

	// Sprawdzenie granic prostokąta
	    if (x >= ST7735_WIDTH || y >= ST7735_HEIGHT) return;
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	2b9f      	cmp	r3, #159	@ 0x9f
 8000aaa:	d850      	bhi.n	8000b4e <ST7735_FillRectangle+0xca>
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab0:	d84d      	bhi.n	8000b4e <ST7735_FillRectangle+0xca>
	    if (x + w > ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2ba0      	cmp	r3, #160	@ 0xa0
 8000aba:	dd03      	ble.n	8000ac4 <ST7735_FillRectangle+0x40>
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000ac2:	807b      	strh	r3, [r7, #2]
	    if (y + h > ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000ac4:	88ba      	ldrh	r2, [r7, #4]
 8000ac6:	883b      	ldrh	r3, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2b80      	cmp	r3, #128	@ 0x80
 8000acc:	dd03      	ble.n	8000ad6 <ST7735_FillRectangle+0x52>
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ad4:	803b      	strh	r3, [r7, #0]

	    // Wybór wyświetlacza i ustawienie okna adresowego
	    //ST7735_Select();
	    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	b2d8      	uxtb	r0, r3
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	b2d9      	uxtb	r1, r3
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b2dc      	uxtb	r4, r3
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	883b      	ldrh	r3, [r7, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4622      	mov	r2, r4
 8000b00:	f7ff fe99 	bl	8000836 <ST7735_SetAddressWindow>

	    // Przygotowanie danych pikseli
	    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b04:	8c3b      	ldrh	r3, [r7, #32]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	723b      	strb	r3, [r7, #8]
 8000b0e:	8c3b      	ldrh	r3, [r7, #32]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	727b      	strb	r3, [r7, #9]

	    //HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);

	    // Wysyłanie danych pikseli w blokach
	    for (uint16_t row = 0; row < h; ++row) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	81fb      	strh	r3, [r7, #14]
 8000b18:	e012      	b.n	8000b40 <ST7735_FillRectangle+0xbc>
	        for (uint16_t col = 0; col < w; ++col) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81bb      	strh	r3, [r7, #12]
 8000b1e:	e008      	b.n	8000b32 <ST7735_FillRectangle+0xae>
	            ST7735_WriteData(data, sizeof(data));
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe04 	bl	8000734 <ST7735_WriteData>
	        for (uint16_t col = 0; col < w; ++col) {
 8000b2c:	89bb      	ldrh	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	81bb      	strh	r3, [r7, #12]
 8000b32:	89ba      	ldrh	r2, [r7, #12]
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3f2      	bcc.n	8000b20 <ST7735_FillRectangle+0x9c>
	    for (uint16_t row = 0; row < h; ++row) {
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	81fb      	strh	r3, [r7, #14]
 8000b40:	89fa      	ldrh	r2, [r7, #14]
 8000b42:	883b      	ldrh	r3, [r7, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3e8      	bcc.n	8000b1a <ST7735_FillRectangle+0x96>
	        }
	    }

	    // Odseparowanie wyświetlacza
	  ST7735_Unselect();
 8000b48:	f7ff fdb6 	bl	80006b8 <ST7735_Unselect>
 8000b4c:	e000      	b.n	8000b50 <ST7735_FillRectangle+0xcc>
	    if (x >= ST7735_WIDTH || y >= ST7735_HEIGHT) return;
 8000b4e:	bf00      	nop
}
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}

08000b56 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b56:	b590      	push	{r4, r7, lr}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4611      	mov	r1, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	4623      	mov	r3, r4
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	80bb      	strh	r3, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	2b9f      	cmp	r3, #159	@ 0x9f
 8000b78:	d861      	bhi.n	8000c3e <ST7735_FillRectangleFast+0xe8>
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7e:	d85e      	bhi.n	8000c3e <ST7735_FillRectangleFast+0xe8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	4413      	add	r3, r2
 8000b86:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b88:	dd03      	ble.n	8000b92 <ST7735_FillRectangleFast+0x3c>
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000b90:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b92:	88ba      	ldrh	r2, [r7, #4]
 8000b94:	883b      	ldrh	r3, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	2b80      	cmp	r3, #128	@ 0x80
 8000b9a:	dd03      	ble.n	8000ba4 <ST7735_FillRectangleFast+0x4e>
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ba2:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ba4:	f7ff fd78 	bl	8000698 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	b2d8      	uxtb	r0, r3
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	b2d9      	uxtb	r1, r3
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	b2dc      	uxtb	r4, r3
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	f7ff fe30 	bl	8000836 <ST7735_SetAddressWindow>

    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000bd6:	8c3b      	ldrh	r3, [r7, #32]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	723b      	strb	r3, [r7, #8]
 8000be0:	8c3b      	ldrh	r3, [r7, #32]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f9f6 	bl	8001fdc <malloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	80fb      	strh	r3, [r7, #6]
 8000bf8:	e008      	b.n	8000c0c <ST7735_FillRectangleFast+0xb6>
        memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	893a      	ldrh	r2, [r7, #8]
 8000c04:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	80fb      	strh	r3, [r7, #6]
 8000c0c:	88fa      	ldrh	r2, [r7, #6]
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3f2      	bcc.n	8000bfa <ST7735_FillRectangleFast+0xa4>

    for(y = h; y > 0; y--)
 8000c14:	883b      	ldrh	r3, [r7, #0]
 8000c16:	80bb      	strh	r3, [r7, #4]
 8000c18:	e008      	b.n	8000c2c <ST7735_FillRectangleFast+0xd6>
        ST7735_WriteData(line, w * sizeof(pixel));
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fd87 	bl	8000734 <ST7735_WriteData>
    for(y = h; y > 0; y--)
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	80bb      	strh	r3, [r7, #4]
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f3      	bne.n	8000c1a <ST7735_FillRectangleFast+0xc4>

    free(line);
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f001 f9da 	bl	8001fec <free>
    ST7735_Unselect();
 8000c38:	f7ff fd3e 	bl	80006b8 <ST7735_Unselect>
 8000c3c:	e000      	b.n	8000c40 <ST7735_FillRectangleFast+0xea>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c3e:	bf00      	nop
}
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	22a0      	movs	r2, #160	@ 0xa0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ff12 	bl	8000a84 <ST7735_FillRectangle>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	22a0      	movs	r2, #160	@ 0xa0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff6a 	bl	8000b56 <ST7735_FillRectangleFast>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f92b 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fc18 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f935 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f90b 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	20000014 	.word	0x20000014
 8000d14:	20000010 	.word	0x20000010

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_IncTick+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a03      	ldr	r2, [pc, #12]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000014 	.word	0x20000014
 8000d38:	200000d0 	.word	0x200000d0

08000d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b02      	ldr	r3, [pc, #8]	@ (8000d4c <HAL_GetTick+0x10>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	200000d0 	.word	0x200000d0

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff fff0 	bl	8000d3c <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffe0 	bl	8000d3c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000014 	.word	0x20000014

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff90 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff49 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	@ 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e169      	b.n	8001248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8158 	bne.w	8001242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a9a      	ldr	r2, [pc, #616]	@ (8001200 <HAL_GPIO_Init+0x2a0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d05e      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a98      	ldr	r2, [pc, #608]	@ (8001200 <HAL_GPIO_Init+0x2a0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d875      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fa2:	4a98      	ldr	r2, [pc, #608]	@ (8001204 <HAL_GPIO_Init+0x2a4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d058      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fa8:	4a96      	ldr	r2, [pc, #600]	@ (8001204 <HAL_GPIO_Init+0x2a4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d86f      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fae:	4a96      	ldr	r2, [pc, #600]	@ (8001208 <HAL_GPIO_Init+0x2a8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d052      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fb4:	4a94      	ldr	r2, [pc, #592]	@ (8001208 <HAL_GPIO_Init+0x2a8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d869      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fba:	4a94      	ldr	r2, [pc, #592]	@ (800120c <HAL_GPIO_Init+0x2ac>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d04c      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fc0:	4a92      	ldr	r2, [pc, #584]	@ (800120c <HAL_GPIO_Init+0x2ac>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d863      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fc6:	4a92      	ldr	r2, [pc, #584]	@ (8001210 <HAL_GPIO_Init+0x2b0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d046      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a90      	ldr	r2, [pc, #576]	@ (8001210 <HAL_GPIO_Init+0x2b0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d85d      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d82a      	bhi.n	800102c <HAL_GPIO_Init+0xcc>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d859      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fda:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <HAL_GPIO_Init+0x80>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	0800108f 	.word	0x0800108f
 8000ff4:	0800108f 	.word	0x0800108f
 8000ff8:	0800108f 	.word	0x0800108f
 8000ffc:	0800108f 	.word	0x0800108f
 8001000:	0800108f 	.word	0x0800108f
 8001004:	0800108f 	.word	0x0800108f
 8001008:	0800108f 	.word	0x0800108f
 800100c:	0800108f 	.word	0x0800108f
 8001010:	0800108f 	.word	0x0800108f
 8001014:	0800108f 	.word	0x0800108f
 8001018:	0800108f 	.word	0x0800108f
 800101c:	0800108f 	.word	0x0800108f
 8001020:	0800108f 	.word	0x0800108f
 8001024:	0800103d 	.word	0x0800103d
 8001028:	08001051 	.word	0x08001051
 800102c:	4a79      	ldr	r2, [pc, #484]	@ (8001214 <HAL_GPIO_Init+0x2b4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001032:	e02c      	b.n	800108e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e029      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	3304      	adds	r3, #4
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e024      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e01f      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	330c      	adds	r3, #12
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e01a      	b.n	8001090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e013      	b.n	8001090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]
          break;
 800107a:	e009      	b.n	8001090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	615a      	str	r2, [r3, #20]
          break;
 8001086:	e003      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x130>
          break;
 800108e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	@ 0xff
 8001094:	d801      	bhi.n	800109a <HAL_GPIO_Init+0x13a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e001      	b.n	800109e <HAL_GPIO_Init+0x13e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2bff      	cmp	r3, #255	@ 0xff
 80010a4:	d802      	bhi.n	80010ac <HAL_GPIO_Init+0x14c>
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x152>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ae:	3b08      	subs	r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	210f      	movs	r1, #15
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	6a39      	ldr	r1, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80b1 	beq.w	8001242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001218 <HAL_GPIO_Init+0x2b8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001218 <HAL_GPIO_Init+0x2b8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001218 <HAL_GPIO_Init+0x2b8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f8:	4a48      	ldr	r2, [pc, #288]	@ (800121c <HAL_GPIO_Init+0x2bc>)
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a40      	ldr	r2, [pc, #256]	@ (8001220 <HAL_GPIO_Init+0x2c0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x1ec>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a3f      	ldr	r2, [pc, #252]	@ (8001224 <HAL_GPIO_Init+0x2c4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1e8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3e      	ldr	r2, [pc, #248]	@ (8001228 <HAL_GPIO_Init+0x2c8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1e4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3d      	ldr	r2, [pc, #244]	@ (800122c <HAL_GPIO_Init+0x2cc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1e0>
 800113c:	2303      	movs	r3, #3
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001140:	2304      	movs	r3, #4
 8001142:	e004      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001144:	2302      	movs	r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 800114c:	2300      	movs	r3, #0
 800114e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001150:	f002 0203 	and.w	r2, r2, #3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4093      	lsls	r3, r2
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800115e:	492f      	ldr	r1, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x2bc>)
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001178:	4b2d      	ldr	r3, [pc, #180]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	492c      	ldr	r1, [pc, #176]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	608b      	str	r3, [r1, #8]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	4928      	ldr	r1, [pc, #160]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	4922      	ldr	r1, [pc, #136]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60cb      	str	r3, [r1, #12]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	491e      	ldr	r1, [pc, #120]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4918      	ldr	r1, [pc, #96]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	4914      	ldr	r1, [pc, #80]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d021      	beq.n	8001234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	490e      	ldr	r1, [pc, #56]	@ (8001230 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e021      	b.n	8001242 <HAL_GPIO_Init+0x2e2>
 80011fe:	bf00      	nop
 8001200:	10320000 	.word	0x10320000
 8001204:	10310000 	.word	0x10310000
 8001208:	10220000 	.word	0x10220000
 800120c:	10210000 	.word	0x10210000
 8001210:	10120000 	.word	0x10120000
 8001214:	10110000 	.word	0x10110000
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000
 800122c:	40011400 	.word	0x40011400
 8001230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	43db      	mvns	r3, r3
 800123c:	4909      	ldr	r1, [pc, #36]	@ (8001264 <HAL_GPIO_Init+0x304>)
 800123e:	4013      	ands	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	3301      	adds	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	f47f ae8e 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	372c      	adds	r7, #44	@ 0x2c
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e272      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8087 	beq.w	80013c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b8:	4b92      	ldr	r3, [pc, #584]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00c      	beq.n	80012de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d112      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
 80012d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012dc:	d10b      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d06c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x12c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d168      	bne.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e24c      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x76>
 8001300:	4b80      	ldr	r3, [pc, #512]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a7f      	ldr	r2, [pc, #508]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e02e      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b7b      	ldr	r3, [pc, #492]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7a      	ldr	r2, [pc, #488]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b78      	ldr	r3, [pc, #480]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a77      	ldr	r2, [pc, #476]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0xbc>
 800133a:	4b72      	ldr	r3, [pc, #456]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a71      	ldr	r2, [pc, #452]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6f      	ldr	r3, [pc, #444]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6e      	ldr	r2, [pc, #440]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001354:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6a      	ldr	r2, [pc, #424]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a67      	ldr	r2, [pc, #412]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fce2 	bl	8000d3c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcde 	bl	8000d3c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e200      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xe4>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fcce 	bl	8000d3c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fcca 	bl	8000d3c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1ec      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x10c>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013de:	4b49      	ldr	r3, [pc, #292]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
 80013ea:	4b46      	ldr	r3, [pc, #280]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c0      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4939      	ldr	r1, [pc, #228]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <HAL_RCC_OscConfig+0x270>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc83 	bl	8000d3c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc7f 	bl	8000d3c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4927      	ldr	r1, [pc, #156]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_RCC_OscConfig+0x270>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fc62 	bl	8000d3c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc5e 	bl	8000d3c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e180      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03a      	beq.n	800151c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_RCC_OscConfig+0x274>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fc42 	bl	8000d3c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc3e 	bl	8000d3c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e160      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f000 fa9c 	bl	8001a18 <RCC_Delay>
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_RCC_OscConfig+0x274>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fc28 	bl	8000d3c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc24 	bl	8000d3c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d908      	bls.n	8001510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e146      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420000 	.word	0x42420000
 800150c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b92      	ldr	r3, [pc, #584]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e9      	bne.n	80014f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a6 	beq.w	8001676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b8b      	ldr	r3, [pc, #556]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a87      	ldr	r2, [pc, #540]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b85      	ldr	r3, [pc, #532]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b82      	ldr	r3, [pc, #520]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbe5 	bl	8000d3c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fbe1 	bl	8000d3c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	@ 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e103      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <HAL_RCC_OscConfig+0x4c8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 800159c:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015b2:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a66      	ldr	r2, [pc, #408]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x356>
 80015d4:	4b61      	ldr	r3, [pc, #388]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a60      	ldr	r2, [pc, #384]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a5d      	ldr	r2, [pc, #372]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015ee:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a5a      	ldr	r2, [pc, #360]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a57      	ldr	r2, [pc, #348]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb95 	bl	8000d3c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb91 	bl	8000d3c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0b1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x37e>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fb7f 	bl	8000d3c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fb7b 	bl	8000d3c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e09b      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b40      	ldr	r3, [pc, #256]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b36      	ldr	r3, [pc, #216]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d061      	beq.n	8001750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d146      	bne.n	8001722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb4f 	bl	8000d3c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb4b 	bl	8000d3c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e06d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4921      	ldr	r1, [pc, #132]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a19      	ldr	r1, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	430b      	orrs	r3, r1
 80016ee:	491b      	ldr	r1, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb1f 	bl	8000d3c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb1b 	bl	8000d3c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
 8001720:	e035      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb08 	bl	8000d3c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fb04 	bl	8000d3c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e026      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x498>
 800174e:	e01e      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e019      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x500>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0d0      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d910      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b67      	ldr	r3, [pc, #412]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4965      	ldr	r1, [pc, #404]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a58      	ldr	r2, [pc, #352]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800181a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d040      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e073      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06b      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4936      	ldr	r1, [pc, #216]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa56 	bl	8000d3c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa52 	bl	8000d3c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e053      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d210      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 0207 	bic.w	r2, r3, #7
 80018d2:	4922      	ldr	r1, [pc, #136]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_RCC_ClockConfig+0x1cc>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f9b4 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	08002290 	.word	0x08002290
 8001968:	20000004 	.word	0x20000004
 800196c:	20000010 	.word	0x20000010

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x30>
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x36>
 800199e:	e027      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	e027      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c5b      	lsrs	r3, r3, #17
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e004      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	693b      	ldr	r3, [r7, #16]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	08003074 	.word	0x08003074
 8001a10:	08003084 	.word	0x08003084
 8001a14:	003d0900 	.word	0x003d0900

08001a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <RCC_Delay+0x34>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <RCC_Delay+0x38>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0a5b      	lsrs	r3, r3, #9
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a34:	bf00      	nop
  }
  while (Delay --);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	60fa      	str	r2, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f9      	bne.n	8001a34 <RCC_Delay+0x1c>
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	10624dd3 	.word	0x10624dd3

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fd60 	bl	8000540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f940 	bl	8001d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d001      	beq.n	8001b0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a18      	ldr	r2, [pc, #96]	@ (8001b7c <HAL_TIM_Base_Start+0x88>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00e      	beq.n	8001b3c <HAL_TIM_Base_Start+0x48>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b26:	d009      	beq.n	8001b3c <HAL_TIM_Base_Start+0x48>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <HAL_TIM_Base_Start+0x8c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIM_Base_Start+0x48>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	@ (8001b84 <HAL_TIM_Base_Start+0x90>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d010      	beq.n	8001b70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5e:	e007      	b.n	8001b70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0b4      	b.n	8001d0e <HAL_TIM_ConfigClockSource+0x186>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bdc:	d03e      	beq.n	8001c5c <HAL_TIM_ConfigClockSource+0xd4>
 8001bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001be2:	f200 8087 	bhi.w	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bea:	f000 8086 	beq.w	8001cfa <HAL_TIM_ConfigClockSource+0x172>
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bf2:	d87f      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001bf4:	2b70      	cmp	r3, #112	@ 0x70
 8001bf6:	d01a      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0xa6>
 8001bf8:	2b70      	cmp	r3, #112	@ 0x70
 8001bfa:	d87b      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001bfc:	2b60      	cmp	r3, #96	@ 0x60
 8001bfe:	d050      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8001c00:	2b60      	cmp	r3, #96	@ 0x60
 8001c02:	d877      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c04:	2b50      	cmp	r3, #80	@ 0x50
 8001c06:	d03c      	beq.n	8001c82 <HAL_TIM_ConfigClockSource+0xfa>
 8001c08:	2b50      	cmp	r3, #80	@ 0x50
 8001c0a:	d873      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c0c:	2b40      	cmp	r3, #64	@ 0x40
 8001c0e:	d058      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8001c10:	2b40      	cmp	r3, #64	@ 0x40
 8001c12:	d86f      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c14:	2b30      	cmp	r3, #48	@ 0x30
 8001c16:	d064      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8001c18:	2b30      	cmp	r3, #48	@ 0x30
 8001c1a:	d86b      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d060      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d867      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d05c      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d05a      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8001c2c:	e062      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c3e:	f000 f950 	bl	8001ee2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	609a      	str	r2, [r3, #8]
      break;
 8001c5a:	e04f      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c6c:	f000 f939 	bl	8001ee2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c7e:	609a      	str	r2, [r3, #8]
      break;
 8001c80:	e03c      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f000 f8b0 	bl	8001df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2150      	movs	r1, #80	@ 0x50
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f907 	bl	8001eae <TIM_ITRx_SetConfig>
      break;
 8001ca0:	e02c      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f000 f8ce 	bl	8001e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2160      	movs	r1, #96	@ 0x60
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f8f7 	bl	8001eae <TIM_ITRx_SetConfig>
      break;
 8001cc0:	e01c      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f000 f890 	bl	8001df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f8e7 	bl	8001eae <TIM_ITRx_SetConfig>
      break;
 8001ce0:	e00c      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f000 f8de 	bl	8001eae <TIM_ITRx_SetConfig>
      break;
 8001cf2:	e003      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf8:	e000      	b.n	8001cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001de8 <TIM_Base_SetConfig+0xd0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00b      	beq.n	8001d48 <TIM_Base_SetConfig+0x30>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d36:	d007      	beq.n	8001d48 <TIM_Base_SetConfig+0x30>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dec <TIM_Base_SetConfig+0xd4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d003      	beq.n	8001d48 <TIM_Base_SetConfig+0x30>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a2b      	ldr	r2, [pc, #172]	@ (8001df0 <TIM_Base_SetConfig+0xd8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d108      	bne.n	8001d5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a22      	ldr	r2, [pc, #136]	@ (8001de8 <TIM_Base_SetConfig+0xd0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00b      	beq.n	8001d7a <TIM_Base_SetConfig+0x62>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d68:	d007      	beq.n	8001d7a <TIM_Base_SetConfig+0x62>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <TIM_Base_SetConfig+0xd4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <TIM_Base_SetConfig+0x62>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <TIM_Base_SetConfig+0xd8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <TIM_Base_SetConfig+0xd0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d103      	bne.n	8001dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f023 0201 	bic.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
  }
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800

08001df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f023 0201 	bic.w	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f023 030a 	bic.w	r3, r3, #10
 8001e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	621a      	str	r2, [r3, #32]
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f023 0210 	bic.w	r2, r3, #16
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	031b      	lsls	r3, r3, #12
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	621a      	str	r2, [r3, #32]
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f043 0307 	orr.w	r3, r3, #7
 8001ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	609a      	str	r2, [r3, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b087      	sub	sp, #28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	609a      	str	r2, [r3, #8]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e046      	b.n	8001fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a16      	ldr	r2, [pc, #88]	@ (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f84:	d009      	beq.n	8001f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10c      	bne.n	8001fb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800

08001fdc <malloc>:
 8001fdc:	4b02      	ldr	r3, [pc, #8]	@ (8001fe8 <malloc+0xc>)
 8001fde:	4601      	mov	r1, r0
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	f000 b82d 	b.w	8002040 <_malloc_r>
 8001fe6:	bf00      	nop
 8001fe8:	20000018 	.word	0x20000018

08001fec <free>:
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <free+0xc>)
 8001fee:	4601      	mov	r1, r0
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f000 b8f5 	b.w	80021e0 <_free_r>
 8001ff6:	bf00      	nop
 8001ff8:	20000018 	.word	0x20000018

08001ffc <sbrk_aligned>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800203c <sbrk_aligned+0x40>)
 8002000:	460c      	mov	r4, r1
 8002002:	6831      	ldr	r1, [r6, #0]
 8002004:	4605      	mov	r5, r0
 8002006:	b911      	cbnz	r1, 800200e <sbrk_aligned+0x12>
 8002008:	f000 f8ae 	bl	8002168 <_sbrk_r>
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	4621      	mov	r1, r4
 8002010:	4628      	mov	r0, r5
 8002012:	f000 f8a9 	bl	8002168 <_sbrk_r>
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	d103      	bne.n	8002022 <sbrk_aligned+0x26>
 800201a:	f04f 34ff 	mov.w	r4, #4294967295
 800201e:	4620      	mov	r0, r4
 8002020:	bd70      	pop	{r4, r5, r6, pc}
 8002022:	1cc4      	adds	r4, r0, #3
 8002024:	f024 0403 	bic.w	r4, r4, #3
 8002028:	42a0      	cmp	r0, r4
 800202a:	d0f8      	beq.n	800201e <sbrk_aligned+0x22>
 800202c:	1a21      	subs	r1, r4, r0
 800202e:	4628      	mov	r0, r5
 8002030:	f000 f89a 	bl	8002168 <_sbrk_r>
 8002034:	3001      	adds	r0, #1
 8002036:	d1f2      	bne.n	800201e <sbrk_aligned+0x22>
 8002038:	e7ef      	b.n	800201a <sbrk_aligned+0x1e>
 800203a:	bf00      	nop
 800203c:	200000d4 	.word	0x200000d4

08002040 <_malloc_r>:
 8002040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002044:	1ccd      	adds	r5, r1, #3
 8002046:	f025 0503 	bic.w	r5, r5, #3
 800204a:	3508      	adds	r5, #8
 800204c:	2d0c      	cmp	r5, #12
 800204e:	bf38      	it	cc
 8002050:	250c      	movcc	r5, #12
 8002052:	2d00      	cmp	r5, #0
 8002054:	4606      	mov	r6, r0
 8002056:	db01      	blt.n	800205c <_malloc_r+0x1c>
 8002058:	42a9      	cmp	r1, r5
 800205a:	d904      	bls.n	8002066 <_malloc_r+0x26>
 800205c:	230c      	movs	r3, #12
 800205e:	6033      	str	r3, [r6, #0]
 8002060:	2000      	movs	r0, #0
 8002062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800213c <_malloc_r+0xfc>
 800206a:	f000 f869 	bl	8002140 <__malloc_lock>
 800206e:	f8d8 3000 	ldr.w	r3, [r8]
 8002072:	461c      	mov	r4, r3
 8002074:	bb44      	cbnz	r4, 80020c8 <_malloc_r+0x88>
 8002076:	4629      	mov	r1, r5
 8002078:	4630      	mov	r0, r6
 800207a:	f7ff ffbf 	bl	8001ffc <sbrk_aligned>
 800207e:	1c43      	adds	r3, r0, #1
 8002080:	4604      	mov	r4, r0
 8002082:	d158      	bne.n	8002136 <_malloc_r+0xf6>
 8002084:	f8d8 4000 	ldr.w	r4, [r8]
 8002088:	4627      	mov	r7, r4
 800208a:	2f00      	cmp	r7, #0
 800208c:	d143      	bne.n	8002116 <_malloc_r+0xd6>
 800208e:	2c00      	cmp	r4, #0
 8002090:	d04b      	beq.n	800212a <_malloc_r+0xea>
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	4639      	mov	r1, r7
 8002096:	4630      	mov	r0, r6
 8002098:	eb04 0903 	add.w	r9, r4, r3
 800209c:	f000 f864 	bl	8002168 <_sbrk_r>
 80020a0:	4581      	cmp	r9, r0
 80020a2:	d142      	bne.n	800212a <_malloc_r+0xea>
 80020a4:	6821      	ldr	r1, [r4, #0]
 80020a6:	4630      	mov	r0, r6
 80020a8:	1a6d      	subs	r5, r5, r1
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7ff ffa6 	bl	8001ffc <sbrk_aligned>
 80020b0:	3001      	adds	r0, #1
 80020b2:	d03a      	beq.n	800212a <_malloc_r+0xea>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	442b      	add	r3, r5
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	f8d8 3000 	ldr.w	r3, [r8]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	bb62      	cbnz	r2, 800211c <_malloc_r+0xdc>
 80020c2:	f8c8 7000 	str.w	r7, [r8]
 80020c6:	e00f      	b.n	80020e8 <_malloc_r+0xa8>
 80020c8:	6822      	ldr	r2, [r4, #0]
 80020ca:	1b52      	subs	r2, r2, r5
 80020cc:	d420      	bmi.n	8002110 <_malloc_r+0xd0>
 80020ce:	2a0b      	cmp	r2, #11
 80020d0:	d917      	bls.n	8002102 <_malloc_r+0xc2>
 80020d2:	1961      	adds	r1, r4, r5
 80020d4:	42a3      	cmp	r3, r4
 80020d6:	6025      	str	r5, [r4, #0]
 80020d8:	bf18      	it	ne
 80020da:	6059      	strne	r1, [r3, #4]
 80020dc:	6863      	ldr	r3, [r4, #4]
 80020de:	bf08      	it	eq
 80020e0:	f8c8 1000 	streq.w	r1, [r8]
 80020e4:	5162      	str	r2, [r4, r5]
 80020e6:	604b      	str	r3, [r1, #4]
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f82f 	bl	800214c <__malloc_unlock>
 80020ee:	f104 000b 	add.w	r0, r4, #11
 80020f2:	1d23      	adds	r3, r4, #4
 80020f4:	f020 0007 	bic.w	r0, r0, #7
 80020f8:	1ac2      	subs	r2, r0, r3
 80020fa:	bf1c      	itt	ne
 80020fc:	1a1b      	subne	r3, r3, r0
 80020fe:	50a3      	strne	r3, [r4, r2]
 8002100:	e7af      	b.n	8002062 <_malloc_r+0x22>
 8002102:	6862      	ldr	r2, [r4, #4]
 8002104:	42a3      	cmp	r3, r4
 8002106:	bf0c      	ite	eq
 8002108:	f8c8 2000 	streq.w	r2, [r8]
 800210c:	605a      	strne	r2, [r3, #4]
 800210e:	e7eb      	b.n	80020e8 <_malloc_r+0xa8>
 8002110:	4623      	mov	r3, r4
 8002112:	6864      	ldr	r4, [r4, #4]
 8002114:	e7ae      	b.n	8002074 <_malloc_r+0x34>
 8002116:	463c      	mov	r4, r7
 8002118:	687f      	ldr	r7, [r7, #4]
 800211a:	e7b6      	b.n	800208a <_malloc_r+0x4a>
 800211c:	461a      	mov	r2, r3
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	42a3      	cmp	r3, r4
 8002122:	d1fb      	bne.n	800211c <_malloc_r+0xdc>
 8002124:	2300      	movs	r3, #0
 8002126:	6053      	str	r3, [r2, #4]
 8002128:	e7de      	b.n	80020e8 <_malloc_r+0xa8>
 800212a:	230c      	movs	r3, #12
 800212c:	4630      	mov	r0, r6
 800212e:	6033      	str	r3, [r6, #0]
 8002130:	f000 f80c 	bl	800214c <__malloc_unlock>
 8002134:	e794      	b.n	8002060 <_malloc_r+0x20>
 8002136:	6005      	str	r5, [r0, #0]
 8002138:	e7d6      	b.n	80020e8 <_malloc_r+0xa8>
 800213a:	bf00      	nop
 800213c:	200000d8 	.word	0x200000d8

08002140 <__malloc_lock>:
 8002140:	4801      	ldr	r0, [pc, #4]	@ (8002148 <__malloc_lock+0x8>)
 8002142:	f000 b84b 	b.w	80021dc <__retarget_lock_acquire_recursive>
 8002146:	bf00      	nop
 8002148:	20000218 	.word	0x20000218

0800214c <__malloc_unlock>:
 800214c:	4801      	ldr	r0, [pc, #4]	@ (8002154 <__malloc_unlock+0x8>)
 800214e:	f000 b846 	b.w	80021de <__retarget_lock_release_recursive>
 8002152:	bf00      	nop
 8002154:	20000218 	.word	0x20000218

08002158 <memset>:
 8002158:	4603      	mov	r3, r0
 800215a:	4402      	add	r2, r0
 800215c:	4293      	cmp	r3, r2
 800215e:	d100      	bne.n	8002162 <memset+0xa>
 8002160:	4770      	bx	lr
 8002162:	f803 1b01 	strb.w	r1, [r3], #1
 8002166:	e7f9      	b.n	800215c <memset+0x4>

08002168 <_sbrk_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	2300      	movs	r3, #0
 800216c:	4d05      	ldr	r5, [pc, #20]	@ (8002184 <_sbrk_r+0x1c>)
 800216e:	4604      	mov	r4, r0
 8002170:	4608      	mov	r0, r1
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	f7fe fa2e 	bl	80005d4 <_sbrk>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_sbrk_r+0x1a>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	b103      	cbz	r3, 8002182 <_sbrk_r+0x1a>
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	20000214 	.word	0x20000214

08002188 <__errno>:
 8002188:	4b01      	ldr	r3, [pc, #4]	@ (8002190 <__errno+0x8>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000018 	.word	0x20000018

08002194 <__libc_init_array>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	2600      	movs	r6, #0
 8002198:	4d0c      	ldr	r5, [pc, #48]	@ (80021cc <__libc_init_array+0x38>)
 800219a:	4c0d      	ldr	r4, [pc, #52]	@ (80021d0 <__libc_init_array+0x3c>)
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	42a6      	cmp	r6, r4
 80021a2:	d109      	bne.n	80021b8 <__libc_init_array+0x24>
 80021a4:	f000 f864 	bl	8002270 <_init>
 80021a8:	2600      	movs	r6, #0
 80021aa:	4d0a      	ldr	r5, [pc, #40]	@ (80021d4 <__libc_init_array+0x40>)
 80021ac:	4c0a      	ldr	r4, [pc, #40]	@ (80021d8 <__libc_init_array+0x44>)
 80021ae:	1b64      	subs	r4, r4, r5
 80021b0:	10a4      	asrs	r4, r4, #2
 80021b2:	42a6      	cmp	r6, r4
 80021b4:	d105      	bne.n	80021c2 <__libc_init_array+0x2e>
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021bc:	4798      	blx	r3
 80021be:	3601      	adds	r6, #1
 80021c0:	e7ee      	b.n	80021a0 <__libc_init_array+0xc>
 80021c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c6:	4798      	blx	r3
 80021c8:	3601      	adds	r6, #1
 80021ca:	e7f2      	b.n	80021b2 <__libc_init_array+0x1e>
 80021cc:	08003088 	.word	0x08003088
 80021d0:	08003088 	.word	0x08003088
 80021d4:	08003088 	.word	0x08003088
 80021d8:	0800308c 	.word	0x0800308c

080021dc <__retarget_lock_acquire_recursive>:
 80021dc:	4770      	bx	lr

080021de <__retarget_lock_release_recursive>:
 80021de:	4770      	bx	lr

080021e0 <_free_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4605      	mov	r5, r0
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d040      	beq.n	800226a <_free_r+0x8a>
 80021e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ec:	1f0c      	subs	r4, r1, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bfb8      	it	lt
 80021f2:	18e4      	addlt	r4, r4, r3
 80021f4:	f7ff ffa4 	bl	8002140 <__malloc_lock>
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <_free_r+0x8c>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	b933      	cbnz	r3, 800220c <_free_r+0x2c>
 80021fe:	6063      	str	r3, [r4, #4]
 8002200:	6014      	str	r4, [r2, #0]
 8002202:	4628      	mov	r0, r5
 8002204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002208:	f7ff bfa0 	b.w	800214c <__malloc_unlock>
 800220c:	42a3      	cmp	r3, r4
 800220e:	d908      	bls.n	8002222 <_free_r+0x42>
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	1821      	adds	r1, r4, r0
 8002214:	428b      	cmp	r3, r1
 8002216:	bf01      	itttt	eq
 8002218:	6819      	ldreq	r1, [r3, #0]
 800221a:	685b      	ldreq	r3, [r3, #4]
 800221c:	1809      	addeq	r1, r1, r0
 800221e:	6021      	streq	r1, [r4, #0]
 8002220:	e7ed      	b.n	80021fe <_free_r+0x1e>
 8002222:	461a      	mov	r2, r3
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	b10b      	cbz	r3, 800222c <_free_r+0x4c>
 8002228:	42a3      	cmp	r3, r4
 800222a:	d9fa      	bls.n	8002222 <_free_r+0x42>
 800222c:	6811      	ldr	r1, [r2, #0]
 800222e:	1850      	adds	r0, r2, r1
 8002230:	42a0      	cmp	r0, r4
 8002232:	d10b      	bne.n	800224c <_free_r+0x6c>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	4401      	add	r1, r0
 8002238:	1850      	adds	r0, r2, r1
 800223a:	4283      	cmp	r3, r0
 800223c:	6011      	str	r1, [r2, #0]
 800223e:	d1e0      	bne.n	8002202 <_free_r+0x22>
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4408      	add	r0, r1
 8002246:	6010      	str	r0, [r2, #0]
 8002248:	6053      	str	r3, [r2, #4]
 800224a:	e7da      	b.n	8002202 <_free_r+0x22>
 800224c:	d902      	bls.n	8002254 <_free_r+0x74>
 800224e:	230c      	movs	r3, #12
 8002250:	602b      	str	r3, [r5, #0]
 8002252:	e7d6      	b.n	8002202 <_free_r+0x22>
 8002254:	6820      	ldr	r0, [r4, #0]
 8002256:	1821      	adds	r1, r4, r0
 8002258:	428b      	cmp	r3, r1
 800225a:	bf01      	itttt	eq
 800225c:	6819      	ldreq	r1, [r3, #0]
 800225e:	685b      	ldreq	r3, [r3, #4]
 8002260:	1809      	addeq	r1, r1, r0
 8002262:	6021      	streq	r1, [r4, #0]
 8002264:	6063      	str	r3, [r4, #4]
 8002266:	6054      	str	r4, [r2, #4]
 8002268:	e7cb      	b.n	8002202 <_free_r+0x22>
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	200000d8 	.word	0x200000d8

08002270 <_init>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	bf00      	nop
 8002274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002276:	bc08      	pop	{r3}
 8002278:	469e      	mov	lr, r3
 800227a:	4770      	bx	lr

0800227c <_fini>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	bf00      	nop
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr
